note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class STDLIB_FUNCTIONS_API


feature -- Access

	swab_1 (buf1: STRING; buf2: STRING; sizeinbytes: INTEGER) 
		local
			buf1_c_string: C_STRING
			buf2_c_string: C_STRING
		do
			create buf1_c_string.make (buf1)
			create buf2_c_string.make (buf2)
			c_swab_1 (buf1_c_string.item, buf2_c_string.item, sizeinbytes)
		end

	exit_2 (code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				exit ((int)$code);
			]"
		end

	exit_1 (code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_exit ((int)$code);
			]"
		end

	exit (code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_Exit ((int)$code);
			]"
		end

	quick_exit (code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				quick_exit ((int)$code);
			]"
		end

	abort
		external
			"C inline use <plplot.h>"
		alias
			"[
				abort ();
			]"
		end

	set_abort_behavior (flags: INTEGER; mask: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_abort_behavior ((unsigned int)$flags, (unsigned int)$mask);
			]"
		end

	atexit (anonymous_1: POINTER): INTEGER 
		do
			Result := c_atexit (anonymous_1)
		end

	onexit_1 (func: POINTER): POINTER 
		do
			Result := c_onexit_1 (func)
		end

	at_quick_exit (anonymous_1: POINTER): INTEGER 
		do
			Result := c_at_quick_exit (anonymous_1)
		end

	set_purecall_handler (handler: POINTER): POINTER 
		do
			Result := c_set_purecall_handler (handler)
		end

	get_purecall_handler: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_purecall_handler ();
			]"
		end

	set_invalid_parameter_handler (handler: POINTER): POINTER 
		do
			Result := c_set_invalid_parameter_handler (handler)
		end

	get_invalid_parameter_handler: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_invalid_parameter_handler ();
			]"
		end

	set_thread_local_invalid_parameter_handler (handler: POINTER): POINTER 
		do
			Result := c_set_thread_local_invalid_parameter_handler (handler)
		end

	get_thread_local_invalid_parameter_handler: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_thread_local_invalid_parameter_handler ();
			]"
		end

	set_error_mode (mode: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_error_mode ((int)$mode);
			]"
		end

	doserrno: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __doserrno ();
			]"
		end

	set_doserrno (value: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_doserrno ((unsigned long)$value);
			]"
		end

	get_doserrno (value: POINTER): INTEGER 
		do
			Result := c_get_doserrno (value)
		end

	sys_errlist: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __sys_errlist ();
			]"
		end

	sys_nerr: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __sys_nerr ();
			]"
		end

	p__pgmptr: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p__pgmptr ();
			]"
		end

	p__wpgmptr: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p__wpgmptr ();
			]"
		end

	p__fmode: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p__fmode ();
			]"
		end

	get_pgmptr (value: POINTER): INTEGER 
		do
			Result := c_get_pgmptr (value)
		end

	get_wpgmptr (value: POINTER): INTEGER 
		do
			Result := c_get_wpgmptr (value)
		end

	set_fmode (mode: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_fmode ((int)$mode);
			]"
		end

	get_fmode (pmode: POINTER): INTEGER 
		do
			Result := c_get_fmode (pmode)
		end

	abs (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return abs ((int)$number);
			]"
		end

	labs (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return labs ((long)$number);
			]"
		end

	llabs (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return llabs ((long long)$number);
			]"
		end

	abs64 (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _abs64 ((__int64)$number);
			]"
		end

	byteswap_ushort (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _byteswap_ushort ((unsigned short)$number);
			]"
		end

	byteswap_ulong (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _byteswap_ulong ((unsigned long)$number);
			]"
		end

	byteswap_uint64 (number: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _byteswap_uint64 ((unsigned __int64)$number);
			]"
		end

	div (numerator: INTEGER; denominator: INTEGER): POINTER
		external
			"C inline use <plplot.h>"

		alias
			"[
				div_t *result = (div_t*) malloc (sizeof(div_t));
				*result = div ((int)$numerator, (int)$denominator);
				return result;
			]"
		end

	ldiv (numerator: INTEGER; denominator: INTEGER): POINTER
		external
			"C inline use <plplot.h>"

		alias
			"[
				ldiv_t *result = (ldiv_t*) malloc (sizeof(ldiv_t));
				*result = ldiv ((long)$numerator, (long)$denominator);
				return result;
			]"
		end

	lldiv (numerator: INTEGER; denominator: INTEGER): POINTER
		external
			"C inline use <plplot.h>"

		alias
			"[
				lldiv_t *result = (lldiv_t*) malloc (sizeof(lldiv_t));
				*result = lldiv ((long long)$numerator, (long long)$denominator);
				return result;
			]"
		end

	rotl (value: INTEGER; shift: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _rotl ((unsigned int)$value, (int)$shift);
			]"
		end

	lrotl (value: INTEGER; shift: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _lrotl ((unsigned long)$value, (int)$shift);
			]"
		end

	rotl64 (value: INTEGER; shift: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _rotl64 ((unsigned __int64)$value, (int)$shift);
			]"
		end

	rotr (value: INTEGER; shift: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _rotr ((unsigned int)$value, (int)$shift);
			]"
		end

	lrotr (value: INTEGER; shift: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _lrotr ((unsigned long)$value, (int)$shift);
			]"
		end

	rotr64 (value: INTEGER; shift: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _rotr64 ((unsigned __int64)$value, (int)$shift);
			]"
		end

	srand (seed: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				srand ((unsigned int)$seed);
			]"
		end

	rand: INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return rand ();
			]"
		end

	atof (string: STRING): REAL_64 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atof (string_c_string.item)
		end

	atoi (string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoi (string_c_string.item)
		end

	atol (string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atol (string_c_string.item)
		end

	atoll (string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoll (string_c_string.item)
		end

	atoi64 (string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoi64 (string_c_string.item)
		end

	atof_l (string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): REAL_64 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atof_l (string_c_string.item, locale.item)
		end

	atoi_l (string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoi_l (string_c_string.item, locale.item)
		end

	atol_l (string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atol_l (string_c_string.item, locale.item)
		end

	atoll_l (string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoll_l (string_c_string.item, locale.item)
		end

	atoi64_l (string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoi64_l (string_c_string.item, locale.item)
		end

	atoflt (a_result: _CRT_FLOAT_STRUCT_API; string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoflt (a_result.item, string_c_string.item)
		end

	atodbl (a_result: _CRT_DOUBLE_STRUCT_API; string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atodbl (a_result.item, string_c_string.item)
		end

	atoldbl (a_result: _LDOUBLE_STRUCT_API; string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoldbl (a_result.item, string_c_string.item)
		end

	atoflt_l (a_result: _CRT_FLOAT_STRUCT_API; string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoflt_l (a_result.item, string_c_string.item, locale.item)
		end

	atodbl_l (a_result: _CRT_DOUBLE_STRUCT_API; string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atodbl_l (a_result.item, string_c_string.item, locale.item)
		end

	atoldbl_l (a_result: _LDOUBLE_STRUCT_API; string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_atoldbl_l (a_result.item, string_c_string.item, locale.item)
		end

	strtof (string: STRING; endptr: POINTER): REAL 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtof (string_c_string.item, endptr)
		end

	strtof_l (string: STRING; endptr: POINTER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): REAL 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtof_l (string_c_string.item, endptr, locale.item)
		end

	strtod (string: STRING; endptr: POINTER): REAL_64 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtod (string_c_string.item, endptr)
		end

	strtod_l (string: STRING; endptr: POINTER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): REAL_64 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtod_l (string_c_string.item, endptr, locale.item)
		end

	strtold (string: STRING; endptr: POINTER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtold (string_c_string.item, endptr)
		end

	strtold_l (string: STRING; endptr: POINTER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtold_l (string_c_string.item, endptr, locale.item)
		end

	strtol (string: STRING; endptr: POINTER; radix: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtol (string_c_string.item, endptr, radix)
		end

	strtol_l (string: STRING; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtol_l (string_c_string.item, endptr, radix, locale.item)
		end

	strtoll (string: STRING; endptr: POINTER; radix: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoll (string_c_string.item, endptr, radix)
		end

	strtoll_l (string: STRING; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoll_l (string_c_string.item, endptr, radix, locale.item)
		end

	strtoul (string: STRING; endptr: POINTER; radix: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoul (string_c_string.item, endptr, radix)
		end

	strtoul_l (string: STRING; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoul_l (string_c_string.item, endptr, radix, locale.item)
		end

	strtoull (string: STRING; endptr: POINTER; radix: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoull (string_c_string.item, endptr, radix)
		end

	strtoull_l (string: STRING; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoull_l (string_c_string.item, endptr, radix, locale.item)
		end

	strtoi64 (string: STRING; endptr: POINTER; radix: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoi64 (string_c_string.item, endptr, radix)
		end

	strtoi64_l (string: STRING; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoi64_l (string_c_string.item, endptr, radix, locale.item)
		end

	strtoui64 (string: STRING; endptr: POINTER; radix: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoui64 (string_c_string.item, endptr, radix)
		end

	strtoui64_l (string: STRING; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_strtoui64_l (string_c_string.item, endptr, radix, locale.item)
		end

	itoa_s (value: INTEGER; buffer: STRING; buffercount: INTEGER; radix: INTEGER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_itoa_s (value, buffer_c_string.item, buffercount, radix)
		end

	itoa_1 (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_itoa_1 (value, buffer_c_string.item, radix)
		end

	ltoa_s (value: INTEGER; buffer: STRING; buffercount: INTEGER; radix: INTEGER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ltoa_s (value, buffer_c_string.item, buffercount, radix)
		end

	ltoa_1 (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ltoa_1 (value, buffer_c_string.item, radix)
		end

	ultoa_s (value: INTEGER; buffer: STRING; buffercount: INTEGER; radix: INTEGER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ultoa_s (value, buffer_c_string.item, buffercount, radix)
		end

	ultoa_1 (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ultoa_1 (value, buffer_c_string.item, radix)
		end

	i64toa_s (value: INTEGER; buffer: STRING; buffercount: INTEGER; radix: INTEGER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_i64toa_s (value, buffer_c_string.item, buffercount, radix)
		end

	i64toa (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_i64toa (value, buffer_c_string.item, radix)
		end

	ui64toa_s (value: INTEGER; buffer: STRING; buffercount: INTEGER; radix: INTEGER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ui64toa_s (value, buffer_c_string.item, buffercount, radix)
		end

	ui64toa (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ui64toa (value, buffer_c_string.item, radix)
		end

	ecvt_s (buffer: STRING; buffercount: INTEGER; value: REAL_64; digitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ecvt_s (buffer_c_string.item, buffercount, value, digitcount, ptdec, ptsign)
		end

	ecvt_1 (value: REAL_64; digitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER 
		do
			Result := c_ecvt_1 (value, digitcount, ptdec, ptsign)
		end

	fcvt_s (buffer: STRING; buffercount: INTEGER; value: REAL_64; fractionaldigitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_fcvt_s (buffer_c_string.item, buffercount, value, fractionaldigitcount, ptdec, ptsign)
		end

	fcvt_1 (value: REAL_64; fractionaldigitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER 
		do
			Result := c_fcvt_1 (value, fractionaldigitcount, ptdec, ptsign)
		end

	gcvt_s (buffer: STRING; buffercount: INTEGER; value: REAL_64; digitcount: INTEGER): INTEGER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_gcvt_s (buffer_c_string.item, buffercount, value, digitcount)
		end

	gcvt_1 (value: REAL_64; digitcount: INTEGER; buffer: STRING): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_gcvt_1 (value, digitcount, buffer_c_string.item)
		end

	mb_cur_max_func: INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return ___mb_cur_max_func ();
			]"
		end

	mb_cur_max_l_func (locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_mb_cur_max_l_func (locale.item)
		end

	mblen (ch: STRING; maxcount: INTEGER): INTEGER 
		local
			ch_c_string: C_STRING
		do
			create ch_c_string.make (ch)
			Result := c_mblen (ch_c_string.item, maxcount)
		end

	mblen_l (ch: STRING; maxcount: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			ch_c_string: C_STRING
		do
			create ch_c_string.make (ch)
			Result := c_mblen_l (ch_c_string.item, maxcount, locale.item)
		end

	mbstrlen (string: STRING): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_mbstrlen (string_c_string.item)
		end

	mbstrlen_l (string: STRING; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_mbstrlen_l (string_c_string.item, locale.item)
		end

	mbstrnlen (string: STRING; maxcount: INTEGER): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_mbstrnlen (string_c_string.item, maxcount)
		end

	mbstrnlen_l (string: STRING; maxcount: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			string_c_string: C_STRING
		do
			create string_c_string.make (string)
			Result := c_mbstrnlen_l (string_c_string.item, maxcount, locale.item)
		end

	mbtowc (dstch: STRING_32; srcch: STRING; srcsizeinbytes: INTEGER): INTEGER 
		local
			srcch_c_string: C_STRING
		do
			create srcch_c_string.make (srcch)
			Result := c_mbtowc ( (create {NATIVE_STRING}.make (dstch)).item, srcch_c_string.item, srcsizeinbytes)
		end

	mbtowc_l (dstch: STRING_32; srcch: STRING; srcsizeinbytes: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			srcch_c_string: C_STRING
		do
			create srcch_c_string.make (srcch)
			Result := c_mbtowc_l ( (create {NATIVE_STRING}.make (dstch)).item, srcch_c_string.item, srcsizeinbytes, locale.item)
		end

	mbstowcs_s (ptnumofcharconverted: POINTER; dstbuf: STRING_32; sizeinwords: INTEGER; srcbuf: STRING; maxcount: INTEGER): INTEGER 
		local
			srcbuf_c_string: C_STRING
		do
			create srcbuf_c_string.make (srcbuf)
			Result := c_mbstowcs_s (ptnumofcharconverted,  (create {NATIVE_STRING}.make (dstbuf)).item, sizeinwords, srcbuf_c_string.item, maxcount)
		end

	mbstowcs (dest: STRING_32; source: STRING; maxcount: INTEGER): INTEGER 
		local
			source_c_string: C_STRING
		do
			create source_c_string.make (source)
			Result := c_mbstowcs ( (create {NATIVE_STRING}.make (dest)).item, source_c_string.item, maxcount)
		end

	mbstowcs_s_l (ptnumofcharconverted: POINTER; dstbuf: STRING_32; sizeinwords: INTEGER; srcbuf: STRING; maxcount: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			srcbuf_c_string: C_STRING
		do
			create srcbuf_c_string.make (srcbuf)
			Result := c_mbstowcs_s_l (ptnumofcharconverted,  (create {NATIVE_STRING}.make (dstbuf)).item, sizeinwords, srcbuf_c_string.item, maxcount, locale.item)
		end

	mbstowcs_l (dest: STRING_32; source: STRING; maxcount: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			source_c_string: C_STRING
		do
			create source_c_string.make (source)
			Result := c_mbstowcs_l ( (create {NATIVE_STRING}.make (dest)).item, source_c_string.item, maxcount, locale.item)
		end

	wctomb (mbch: STRING; wch: CHARACTER_32): INTEGER 
		local
			mbch_c_string: C_STRING
		do
			create mbch_c_string.make (mbch)
			Result := c_wctomb (mbch_c_string.item, wch.code)
		end

	wctomb_l (mbch: STRING; wch: CHARACTER_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			mbch_c_string: C_STRING
		do
			create mbch_c_string.make (mbch)
			Result := c_wctomb_l (mbch_c_string.item, wch.code, locale.item)
		end

	wctomb_s (sizeconverted: POINTER; mbch: STRING; sizeinbytes: INTEGER; wch: CHARACTER_32): INTEGER 
		local
			mbch_c_string: C_STRING
		do
			create mbch_c_string.make (mbch)
			Result := c_wctomb_s (sizeconverted, mbch_c_string.item, sizeinbytes, wch.code)
		end

	wctomb_s_l (sizeconverted: POINTER; mbch: STRING; sizeinbytes: INTEGER; wch: CHARACTER_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			mbch_c_string: C_STRING
		do
			create mbch_c_string.make (mbch)
			Result := c_wctomb_s_l (sizeconverted, mbch_c_string.item, sizeinbytes, wch.code, locale.item)
		end

	wcstombs_s (ptnumofcharconverted: POINTER; dst: STRING; dstsizeinbytes: INTEGER; src: STRING_32; maxcountinbytes: INTEGER): INTEGER 
		local
			dst_c_string: C_STRING
		do
			create dst_c_string.make (dst)
			Result := c_wcstombs_s (ptnumofcharconverted, dst_c_string.item, dstsizeinbytes,  (create {NATIVE_STRING}.make (src)).item, maxcountinbytes)
		end

	wcstombs (dest: STRING; source: STRING_32; maxcount: INTEGER): INTEGER 
		local
			dest_c_string: C_STRING
		do
			create dest_c_string.make (dest)
			Result := c_wcstombs (dest_c_string.item,  (create {NATIVE_STRING}.make (source)).item, maxcount)
		end

	wcstombs_s_l (ptnumofcharconverted: POINTER; dst: STRING; dstsizeinbytes: INTEGER; src: STRING_32; maxcountinbytes: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			dst_c_string: C_STRING
		do
			create dst_c_string.make (dst)
			Result := c_wcstombs_s_l (ptnumofcharconverted, dst_c_string.item, dstsizeinbytes,  (create {NATIVE_STRING}.make (src)).item, maxcountinbytes, locale.item)
		end

	wcstombs_l (dest: STRING; source: STRING_32; maxcount: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		local
			dest_c_string: C_STRING
		do
			create dest_c_string.make (dest)
			Result := c_wcstombs_l (dest_c_string.item,  (create {NATIVE_STRING}.make (source)).item, maxcount, locale.item)
		end

	fullpath (buffer: STRING; path: STRING; buffercount: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
			path_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			create path_c_string.make (path)
			Result := c_fullpath (buffer_c_string.item, path_c_string.item, buffercount)
		end

	makepath_s (buffer: STRING; buffercount: INTEGER; drive: STRING; dir: STRING; filename: STRING; ext: STRING): INTEGER 
		local
			buffer_c_string: C_STRING
			drive_c_string: C_STRING
			dir_c_string: C_STRING
			filename_c_string: C_STRING
			ext_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			create drive_c_string.make (drive)
			create dir_c_string.make (dir)
			create filename_c_string.make (filename)
			create ext_c_string.make (ext)
			Result := c_makepath_s (buffer_c_string.item, buffercount, drive_c_string.item, dir_c_string.item, filename_c_string.item, ext_c_string.item)
		end

	makepath (buffer: STRING; drive: STRING; dir: STRING; filename: STRING; ext: STRING) 
		local
			buffer_c_string: C_STRING
			drive_c_string: C_STRING
			dir_c_string: C_STRING
			filename_c_string: C_STRING
			ext_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			create drive_c_string.make (drive)
			create dir_c_string.make (dir)
			create filename_c_string.make (filename)
			create ext_c_string.make (ext)
			c_makepath (buffer_c_string.item, drive_c_string.item, dir_c_string.item, filename_c_string.item, ext_c_string.item)
		end

	splitpath (fullpath: STRING; drive: STRING; dir: STRING; filename: STRING; ext: STRING) 
		local
			fullpath_c_string: C_STRING
			drive_c_string: C_STRING
			dir_c_string: C_STRING
			filename_c_string: C_STRING
			ext_c_string: C_STRING
		do
			create fullpath_c_string.make (fullpath)
			create drive_c_string.make (drive)
			create dir_c_string.make (dir)
			create filename_c_string.make (filename)
			create ext_c_string.make (ext)
			c_splitpath (fullpath_c_string.item, drive_c_string.item, dir_c_string.item, filename_c_string.item, ext_c_string.item)
		end

	splitpath_s (fullpath: STRING; drive: STRING; drivecount: INTEGER; dir: STRING; dircount: INTEGER; filename: STRING; filenamecount: INTEGER; ext: STRING; extcount: INTEGER): INTEGER 
		local
			fullpath_c_string: C_STRING
			drive_c_string: C_STRING
			dir_c_string: C_STRING
			filename_c_string: C_STRING
			ext_c_string: C_STRING
		do
			create fullpath_c_string.make (fullpath)
			create drive_c_string.make (drive)
			create dir_c_string.make (dir)
			create filename_c_string.make (filename)
			create ext_c_string.make (ext)
			Result := c_splitpath_s (fullpath_c_string.item, drive_c_string.item, drivecount, dir_c_string.item, dircount, filename_c_string.item, filenamecount, ext_c_string.item, extcount)
		end

	getenv_s (requiredcount: POINTER; buffer: STRING; buffercount: INTEGER; varname: STRING): INTEGER 
		local
			buffer_c_string: C_STRING
			varname_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			create varname_c_string.make (varname)
			Result := c_getenv_s (requiredcount, buffer_c_string.item, buffercount, varname_c_string.item)
		end

	p___argc: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p___argc ();
			]"
		end

	p___argv: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p___argv ();
			]"
		end

	p___wargv: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p___wargv ();
			]"
		end

	p__environ: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p__environ ();
			]"
		end

	p__wenviron: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return __p__wenviron ();
			]"
		end

	getenv (varname: STRING): POINTER 
		local
			varname_c_string: C_STRING
		do
			create varname_c_string.make (varname)
			Result := c_getenv (varname_c_string.item)
		end

	dupenv_s (buffer: POINTER; buffercount: POINTER; varname: STRING): INTEGER 
		local
			varname_c_string: C_STRING
		do
			create varname_c_string.make (varname)
			Result := c_dupenv_s (buffer, buffercount, varname_c_string.item)
		end

	system (command: STRING): INTEGER 
		local
			command_c_string: C_STRING
		do
			create command_c_string.make (command)
			Result := c_system (command_c_string.item)
		end

	putenv_1 (envstring: STRING): INTEGER 
		local
			envstring_c_string: C_STRING
		do
			create envstring_c_string.make (envstring)
			Result := c_putenv_1 (envstring_c_string.item)
		end

	putenv_s (name: STRING; value: STRING): INTEGER 
		local
			name_c_string: C_STRING
			value_c_string: C_STRING
		do
			create name_c_string.make (name)
			create value_c_string.make (value)
			Result := c_putenv_s (name_c_string.item, value_c_string.item)
		end

	searchenv_s (filename: STRING; varname: STRING; buffer: STRING; buffercount: INTEGER): INTEGER 
		local
			filename_c_string: C_STRING
			varname_c_string: C_STRING
			buffer_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			create varname_c_string.make (varname)
			create buffer_c_string.make (buffer)
			Result := c_searchenv_s (filename_c_string.item, varname_c_string.item, buffer_c_string.item, buffercount)
		end

	searchenv (filename: STRING; varname: STRING; buffer: STRING) 
		local
			filename_c_string: C_STRING
			varname_c_string: C_STRING
			buffer_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			create varname_c_string.make (varname)
			create buffer_c_string.make (buffer)
			c_searchenv (filename_c_string.item, varname_c_string.item, buffer_c_string.item)
		end

	seterrormode (mode: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_seterrormode ((int)$mode);
			]"
		end

	beep (frequency: INTEGER; duration: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_beep ((unsigned)$frequency, (unsigned)$duration);
			]"
		end

	sleep (duration: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_sleep ((unsigned long)$duration);
			]"
		end

	ecvt (value: REAL_64; digitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER 
		do
			Result := c_ecvt (value, digitcount, ptdec, ptsign)
		end

	fcvt (value: REAL_64; fractionaldigitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER 
		do
			Result := c_fcvt (value, fractionaldigitcount, ptdec, ptsign)
		end

	gcvt (value: REAL_64; digitcount: INTEGER; dstbuf: STRING): POINTER 
		local
			dstbuf_c_string: C_STRING
		do
			create dstbuf_c_string.make (dstbuf)
			Result := c_gcvt (value, digitcount, dstbuf_c_string.item)
		end

	itoa (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_itoa (value, buffer_c_string.item, radix)
		end

	ltoa (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ltoa (value, buffer_c_string.item, radix)
		end

	swab (buf1: STRING; buf2: STRING; sizeinbytes: INTEGER) 
		local
			buf1_c_string: C_STRING
			buf2_c_string: C_STRING
		do
			create buf1_c_string.make (buf1)
			create buf2_c_string.make (buf2)
			c_swab (buf1_c_string.item, buf2_c_string.item, sizeinbytes)
		end

	ultoa (value: INTEGER; buffer: STRING; radix: INTEGER): POINTER 
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_ultoa (value, buffer_c_string.item, radix)
		end

	putenv (envstring: STRING): INTEGER 
		local
			envstring_c_string: C_STRING
		do
			create envstring_c_string.make (envstring)
			Result := c_putenv (envstring_c_string.item)
		end

	onexit (func: POINTER): POINTER 
		do
			Result := c_onexit (func)
		end

feature -- Externals

	c_swab_1 (buf1: POINTER; buf2: POINTER; sizeinbytes: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_swab ((char*)$buf1, (char*)$buf2, (int)$sizeinbytes);
			]"
		end

	c_atexit (anonymous_1: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return atexit ((void (*) (void))$anonymous_1);
			]"
		end

	c_onexit_1 (func: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _onexit ((_onexit_t)$func);
			]"
		end

	c_at_quick_exit (anonymous_1: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return at_quick_exit ((void (*) (void))$anonymous_1);
			]"
		end

	c_set_purecall_handler (handler: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_purecall_handler ((_purecall_handler)$handler);
			]"
		end

	c_set_invalid_parameter_handler (handler: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_invalid_parameter_handler ((_invalid_parameter_handler)$handler);
			]"
		end

	c_set_thread_local_invalid_parameter_handler (handler: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _set_thread_local_invalid_parameter_handler ((_invalid_parameter_handler)$handler);
			]"
		end

	c_get_doserrno (value: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_doserrno ((unsigned long*)$value);
			]"
		end

	c_get_pgmptr (value: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_pgmptr ((char**)$value);
			]"
		end

	c_get_wpgmptr (value: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_wpgmptr ((wchar_t**)$value);
			]"
		end

	c_get_fmode (pmode: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _get_fmode ((int*)$pmode);
			]"
		end

	c_atof (string: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return atof ((char const*)$string);
			]"
		end

	c_atoi (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return atoi ((char const*)$string);
			]"
		end

	c_atol (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return atol ((char const*)$string);
			]"
		end

	c_atoll (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return atoll ((char const*)$string);
			]"
		end

	c_atoi64 (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoi64 ((char const*)$string);
			]"
		end

	c_atof_l (string: POINTER; locale: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atof_l ((char const*)$string, (_locale_t)$locale);
			]"
		end

	c_atoi_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoi_l ((char const*)$string, (_locale_t)$locale);
			]"
		end

	c_atol_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atol_l ((char const*)$string, (_locale_t)$locale);
			]"
		end

	c_atoll_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoll_l ((char const*)$string, (_locale_t)$locale);
			]"
		end

	c_atoi64_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoi64_l ((char const*)$string, (_locale_t)$locale);
			]"
		end

	c_atoflt (a_result: POINTER; string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoflt ((_CRT_FLOAT*)$a_result, (char const*)$string);
			]"
		end

	c_atodbl (a_result: POINTER; string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atodbl ((_CRT_DOUBLE*)$a_result, (char*)$string);
			]"
		end

	c_atoldbl (a_result: POINTER; string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoldbl ((_LDOUBLE*)$a_result, (char*)$string);
			]"
		end

	c_atoflt_l (a_result: POINTER; string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoflt_l ((_CRT_FLOAT*)$a_result, (char const*)$string, (_locale_t)$locale);
			]"
		end

	c_atodbl_l (a_result: POINTER; string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atodbl_l ((_CRT_DOUBLE*)$a_result, (char*)$string, (_locale_t)$locale);
			]"
		end

	c_atoldbl_l (a_result: POINTER; string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _atoldbl_l ((_LDOUBLE*)$a_result, (char*)$string, (_locale_t)$locale);
			]"
		end

	c_strtof (string: POINTER; endptr: POINTER): REAL
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtof ((char const*)$string, (char**)$endptr);
			]"
		end

	c_strtof_l (string: POINTER; endptr: POINTER; locale: POINTER): REAL
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtof_l ((char const*)$string, (char**)$endptr, (_locale_t)$locale);
			]"
		end

	c_strtod (string: POINTER; endptr: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtod ((char const*)$string, (char**)$endptr);
			]"
		end

	c_strtod_l (string: POINTER; endptr: POINTER; locale: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtod_l ((char const*)$string, (char**)$endptr, (_locale_t)$locale);
			]"
		end

	c_strtold (string: POINTER; endptr: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtold ((char const*)$string, (char**)$endptr);
			]"
		end

	c_strtold_l (string: POINTER; endptr: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtold_l ((char const*)$string, (char**)$endptr, (_locale_t)$locale);
			]"
		end

	c_strtol (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtol ((char const*)$string, (char**)$endptr, (int)$radix);
			]"
		end

	c_strtol_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtol_l ((char const*)$string, (char**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_strtoll (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtoll ((char const*)$string, (char**)$endptr, (int)$radix);
			]"
		end

	c_strtoll_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoll_l ((char const*)$string, (char**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_strtoul (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtoul ((char const*)$string, (char**)$endptr, (int)$radix);
			]"
		end

	c_strtoul_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoul_l ((char const*)$string, (char**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_strtoull (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return strtoull ((char const*)$string, (char**)$endptr, (int)$radix);
			]"
		end

	c_strtoull_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoull_l ((char const*)$string, (char**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_strtoi64 (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoi64 ((char const*)$string, (char**)$endptr, (int)$radix);
			]"
		end

	c_strtoi64_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoi64_l ((char const*)$string, (char**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_strtoui64 (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoui64 ((char const*)$string, (char**)$endptr, (int)$radix);
			]"
		end

	c_strtoui64_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _strtoui64_l ((char const*)$string, (char**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_itoa_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _itoa_s ((int)$value, (char*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_itoa_1 (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _itoa ((int)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_ltoa_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ltoa_s ((long)$value, (char*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_ltoa_1 (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ltoa ((long)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_ultoa_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ultoa_s ((unsigned long)$value, (char*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_ultoa_1 (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ultoa ((unsigned long)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_i64toa_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _i64toa_s ((__int64)$value, (char*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_i64toa (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _i64toa ((__int64)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_ui64toa_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ui64toa_s ((unsigned __int64)$value, (char*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_ui64toa (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ui64toa ((unsigned __int64)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_ecvt_s (buffer: POINTER; buffercount: INTEGER; value: REAL_64; digitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ecvt_s ((char*)$buffer, (size_t)$buffercount, (double)$value, (int)$digitcount, (int*)$ptdec, (int*)$ptsign);
			]"
		end

	c_ecvt_1 (value: REAL_64; digitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ecvt ((double)$value, (int)$digitcount, (int*)$ptdec, (int*)$ptsign);
			]"
		end

	c_fcvt_s (buffer: POINTER; buffercount: INTEGER; value: REAL_64; fractionaldigitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _fcvt_s ((char*)$buffer, (size_t)$buffercount, (double)$value, (int)$fractionaldigitcount, (int*)$ptdec, (int*)$ptsign);
			]"
		end

	c_fcvt_1 (value: REAL_64; fractionaldigitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _fcvt ((double)$value, (int)$fractionaldigitcount, (int*)$ptdec, (int*)$ptsign);
			]"
		end

	c_gcvt_s (buffer: POINTER; buffercount: INTEGER; value: REAL_64; digitcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _gcvt_s ((char*)$buffer, (size_t)$buffercount, (double)$value, (int)$digitcount);
			]"
		end

	c_gcvt_1 (value: REAL_64; digitcount: INTEGER; buffer: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _gcvt ((double)$value, (int)$digitcount, (char*)$buffer);
			]"
		end

	c_mb_cur_max_l_func (locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return ___mb_cur_max_l_func ((_locale_t)$locale);
			]"
		end

	c_mblen (ch: POINTER; maxcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return mblen ((char const*)$ch, (size_t)$maxcount);
			]"
		end

	c_mblen_l (ch: POINTER; maxcount: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mblen_l ((char const*)$ch, (size_t)$maxcount, (_locale_t)$locale);
			]"
		end

	c_mbstrlen (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbstrlen ((char const*)$string);
			]"
		end

	c_mbstrlen_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbstrlen_l ((char const*)$string, (_locale_t)$locale);
			]"
		end

	c_mbstrnlen (string: POINTER; maxcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbstrnlen ((char const*)$string, (size_t)$maxcount);
			]"
		end

	c_mbstrnlen_l (string: POINTER; maxcount: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbstrnlen_l ((char const*)$string, (size_t)$maxcount, (_locale_t)$locale);
			]"
		end

	c_mbtowc (dstch: POINTER; srcch: POINTER; srcsizeinbytes: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return mbtowc ((wchar_t*)$dstch, (char const*)$srcch, (size_t)$srcsizeinbytes);
			]"
		end

	c_mbtowc_l (dstch: POINTER; srcch: POINTER; srcsizeinbytes: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbtowc_l ((wchar_t*)$dstch, (char const*)$srcch, (size_t)$srcsizeinbytes, (_locale_t)$locale);
			]"
		end

	c_mbstowcs_s (ptnumofcharconverted: POINTER; dstbuf: POINTER; sizeinwords: INTEGER; srcbuf: POINTER; maxcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return mbstowcs_s ((size_t*)$ptnumofcharconverted, (wchar_t*)$dstbuf, (size_t)$sizeinwords, (char const*)$srcbuf, (size_t)$maxcount);
			]"
		end

	c_mbstowcs (dest: POINTER; source: POINTER; maxcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return mbstowcs ((wchar_t*)$dest, (char const*)$source, (size_t)$maxcount);
			]"
		end

	c_mbstowcs_s_l (ptnumofcharconverted: POINTER; dstbuf: POINTER; sizeinwords: INTEGER; srcbuf: POINTER; maxcount: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbstowcs_s_l ((size_t*)$ptnumofcharconverted, (wchar_t*)$dstbuf, (size_t)$sizeinwords, (char const*)$srcbuf, (size_t)$maxcount, (_locale_t)$locale);
			]"
		end

	c_mbstowcs_l (dest: POINTER; source: POINTER; maxcount: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _mbstowcs_l ((wchar_t*)$dest, (char const*)$source, (size_t)$maxcount, (_locale_t)$locale);
			]"
		end

	c_wctomb (mbch: POINTER; wch: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wctomb ((char*)$mbch, (wchar_t)$wch);
			]"
		end

	c_wctomb_l (mbch: POINTER; wch: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wctomb_l ((char*)$mbch, (wchar_t)$wch, (_locale_t)$locale);
			]"
		end

	c_wctomb_s (sizeconverted: POINTER; mbch: POINTER; sizeinbytes: INTEGER; wch: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wctomb_s ((int*)$sizeconverted, (char*)$mbch, (rsize_t)$sizeinbytes, (wchar_t)$wch);
			]"
		end

	c_wctomb_s_l (sizeconverted: POINTER; mbch: POINTER; sizeinbytes: INTEGER; wch: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wctomb_s_l ((int*)$sizeconverted, (char*)$mbch, (size_t)$sizeinbytes, (wchar_t)$wch, (_locale_t)$locale);
			]"
		end

	c_wcstombs_s (ptnumofcharconverted: POINTER; dst: POINTER; dstsizeinbytes: INTEGER; src: POINTER; maxcountinbytes: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstombs_s ((size_t*)$ptnumofcharconverted, (char*)$dst, (size_t)$dstsizeinbytes, (wchar_t const*)$src, (size_t)$maxcountinbytes);
			]"
		end

	c_wcstombs (dest: POINTER; source: POINTER; maxcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstombs ((char*)$dest, (wchar_t const*)$source, (size_t)$maxcount);
			]"
		end

	c_wcstombs_s_l (ptnumofcharconverted: POINTER; dst: POINTER; dstsizeinbytes: INTEGER; src: POINTER; maxcountinbytes: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstombs_s_l ((size_t*)$ptnumofcharconverted, (char*)$dst, (size_t)$dstsizeinbytes, (wchar_t const*)$src, (size_t)$maxcountinbytes, (_locale_t)$locale);
			]"
		end

	c_wcstombs_l (dest: POINTER; source: POINTER; maxcount: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstombs_l ((char*)$dest, (wchar_t const*)$source, (size_t)$maxcount, (_locale_t)$locale);
			]"
		end

	c_fullpath (buffer: POINTER; path: POINTER; buffercount: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _fullpath ((char*)$buffer, (char const*)$path, (size_t)$buffercount);
			]"
		end

	c_makepath_s (buffer: POINTER; buffercount: INTEGER; drive: POINTER; dir: POINTER; filename: POINTER; ext: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _makepath_s ((char*)$buffer, (size_t)$buffercount, (char const*)$drive, (char const*)$dir, (char const*)$filename, (char const*)$ext);
			]"
		end

	c_makepath (buffer: POINTER; drive: POINTER; dir: POINTER; filename: POINTER; ext: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_makepath ((char*)$buffer, (char const*)$drive, (char const*)$dir, (char const*)$filename, (char const*)$ext);
			]"
		end

	c_splitpath (fullpath: POINTER; drive: POINTER; dir: POINTER; filename: POINTER; ext: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_splitpath ((char const*)$fullpath, (char*)$drive, (char*)$dir, (char*)$filename, (char*)$ext);
			]"
		end

	c_splitpath_s (fullpath: POINTER; drive: POINTER; drivecount: INTEGER; dir: POINTER; dircount: INTEGER; filename: POINTER; filenamecount: INTEGER; ext: POINTER; extcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _splitpath_s ((char const*)$fullpath, (char*)$drive, (size_t)$drivecount, (char*)$dir, (size_t)$dircount, (char*)$filename, (size_t)$filenamecount, (char*)$ext, (size_t)$extcount);
			]"
		end

	c_getenv_s (requiredcount: POINTER; buffer: POINTER; buffercount: INTEGER; varname: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return getenv_s ((size_t*)$requiredcount, (char*)$buffer, (rsize_t)$buffercount, (char const*)$varname);
			]"
		end

	c_getenv (varname: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return getenv ((char const*)$varname);
			]"
		end

	c_dupenv_s (buffer: POINTER; buffercount: POINTER; varname: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _dupenv_s ((char**)$buffer, (size_t*)$buffercount, (char const*)$varname);
			]"
		end

	c_system (command: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return system ((char const*)$command);
			]"
		end

	c_putenv_1 (envstring: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _putenv ((char const*)$envstring);
			]"
		end

	c_putenv_s (name: POINTER; value: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _putenv_s ((char const*)$name, (char const*)$value);
			]"
		end

	c_searchenv_s (filename: POINTER; varname: POINTER; buffer: POINTER; buffercount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _searchenv_s ((char const*)$filename, (char const*)$varname, (char*)$buffer, (size_t)$buffercount);
			]"
		end

	c_searchenv (filename: POINTER; varname: POINTER; buffer: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_searchenv ((char const*)$filename, (char const*)$varname, (char*)$buffer);
			]"
		end

	c_ecvt (value: REAL_64; digitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return ecvt ((double)$value, (int)$digitcount, (int*)$ptdec, (int*)$ptsign);
			]"
		end

	c_fcvt (value: REAL_64; fractionaldigitcount: INTEGER; ptdec: POINTER; ptsign: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return fcvt ((double)$value, (int)$fractionaldigitcount, (int*)$ptdec, (int*)$ptsign);
			]"
		end

	c_gcvt (value: REAL_64; digitcount: INTEGER; dstbuf: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return gcvt ((double)$value, (int)$digitcount, (char*)$dstbuf);
			]"
		end

	c_itoa (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return itoa ((int)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_ltoa (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return ltoa ((long)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_swab (buf1: POINTER; buf2: POINTER; sizeinbytes: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				swab ((char*)$buf1, (char*)$buf2, (int)$sizeinbytes);
			]"
		end

	c_ultoa (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return ultoa ((unsigned long)$value, (char*)$buffer, (int)$radix);
			]"
		end

	c_putenv (envstring: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return putenv ((char const*)$envstring);
			]"
		end

	c_onexit (func: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return onexit ((_onexit_t)$func);
			]"
		end

feature -- Externals Address

end
