note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PLGRAPHICS_IN_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	state: INTEGER
			-- Access member `state`
		require
			exists: exists
		do
			Result := c_state (item)
		ensure
			result_correct: Result = c_state (item)
		end

	set_state (a_value: INTEGER) 
			-- Change the value of member `state` to `a_value`.
		require
			exists: exists
		do
			set_c_state (item, a_value)
		ensure
			state_set: a_value = state
		end

	keysym: INTEGER
			-- Access member `keysym`
		require
			exists: exists
		do
			Result := c_keysym (item)
		ensure
			result_correct: Result = c_keysym (item)
		end

	set_keysym (a_value: INTEGER) 
			-- Change the value of member `keysym` to `a_value`.
		require
			exists: exists
		do
			set_c_keysym (item, a_value)
		ensure
			keysym_set: a_value = keysym
		end

	button: INTEGER
			-- Access member `button`
		require
			exists: exists
		do
			Result := c_button (item)
		ensure
			result_correct: Result = c_button (item)
		end

	set_button (a_value: INTEGER) 
			-- Change the value of member `button` to `a_value`.
		require
			exists: exists
		do
			set_c_button (item, a_value)
		ensure
			button_set: a_value = button
		end

	subwindow: INTEGER
			-- Access member `subwindow`
		require
			exists: exists
		do
			Result := c_subwindow (item)
		ensure
			result_correct: Result = c_subwindow (item)
		end

	set_subwindow (a_value: INTEGER) 
			-- Change the value of member `subwindow` to `a_value`.
		require
			exists: exists
		do
			set_c_subwindow (item, a_value)
		ensure
			subwindow_set: a_value = subwindow
		end

	string: POINTER
			-- Access member `string`
		require
			exists: exists
		do
			Result := c_string (item)
		ensure
			result_correct: Result = c_string (item)
		end

	px: INTEGER
			-- Access member `pX`
		require
			exists: exists
		do
			Result := c_px (item)
		ensure
			result_correct: Result = c_px (item)
		end

	set_px (a_value: INTEGER) 
			-- Change the value of member `pX` to `a_value`.
		require
			exists: exists
		do
			set_c_px (item, a_value)
		ensure
			px_set: a_value = px
		end

	py: INTEGER
			-- Access member `pY`
		require
			exists: exists
		do
			Result := c_py (item)
		ensure
			result_correct: Result = c_py (item)
		end

	set_py (a_value: INTEGER) 
			-- Change the value of member `pY` to `a_value`.
		require
			exists: exists
		do
			set_c_py (item, a_value)
		ensure
			py_set: a_value = py
		end

	dx: REAL_64
			-- Access member `dX`
		require
			exists: exists
		do
			Result := c_dx (item)
		ensure
			result_correct: Result = c_dx (item)
		end

	set_dx (a_value: REAL_64) 
			-- Change the value of member `dX` to `a_value`.
		require
			exists: exists
		do
			set_c_dx (item, a_value)
		ensure
			dx_set: a_value = dx
		end

	dy: REAL_64
			-- Access member `dY`
		require
			exists: exists
		do
			Result := c_dy (item)
		ensure
			result_correct: Result = c_dy (item)
		end

	set_dy (a_value: REAL_64) 
			-- Change the value of member `dY` to `a_value`.
		require
			exists: exists
		do
			set_c_dy (item, a_value)
		ensure
			dy_set: a_value = dy
		end

	wx: REAL_64
			-- Access member `wX`
		require
			exists: exists
		do
			Result := c_wx (item)
		ensure
			result_correct: Result = c_wx (item)
		end

	set_wx (a_value: REAL_64) 
			-- Change the value of member `wX` to `a_value`.
		require
			exists: exists
		do
			set_c_wx (item, a_value)
		ensure
			wx_set: a_value = wx
		end

	wy: REAL_64
			-- Access member `wY`
		require
			exists: exists
		do
			Result := c_wy (item)
		ensure
			result_correct: Result = c_wy (item)
		end

	set_wy (a_value: REAL_64) 
			-- Change the value of member `wY` to `a_value`.
		require
			exists: exists
		do
			set_c_wy (item, a_value)
		ensure
			wy_set: a_value = wy
		end

feature {NONE} -- Implementation wrapper for struct PLGraphicsIn

	sizeof_external: INTEGER 
		external
			"C inline use <plplot.h>"
		alias
			"sizeof(PLGraphicsIn)"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->type =  (int)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_state (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->state
			]"
		end

	set_c_state (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->state =  (unsigned int)$a_value
			]"
		ensure
			state_set: a_value = c_state (an_item)
		end

	c_keysym (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->keysym
			]"
		end

	set_c_keysym (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->keysym =  (unsigned int)$a_value
			]"
		ensure
			keysym_set: a_value = c_keysym (an_item)
		end

	c_button (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->button
			]"
		end

	set_c_button (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->button =  (unsigned int)$a_value
			]"
		ensure
			button_set: a_value = c_button (an_item)
		end

	c_subwindow (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->subwindow
			]"
		end

	set_c_subwindow (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->subwindow =  (PLINT)$a_value
			]"
		ensure
			subwindow_set: a_value = c_subwindow (an_item)
		end

	c_string (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->string
			]"
		end

	c_px (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->pX
			]"
		end

	set_c_px (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->pX =  (int)$a_value
			]"
		ensure
			px_set: a_value = c_px (an_item)
		end

	c_py (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->pY
			]"
		end

	set_c_py (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->pY =  (int)$a_value
			]"
		ensure
			py_set: a_value = c_py (an_item)
		end

	c_dx (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->dX
			]"
		end

	set_c_dx (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->dX =  (PLFLT)$a_value
			]"
		ensure
			dx_set: a_value = c_dx (an_item)
		end

	c_dy (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->dY
			]"
		end

	set_c_dy (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->dY =  (PLFLT)$a_value
			]"
		ensure
			dy_set: a_value = c_dy (an_item)
		end

	c_wx (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->wX
			]"
		end

	set_c_wx (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->wX =  (PLFLT)$a_value
			]"
		ensure
			wx_set: a_value = c_wx (an_item)
		end

	c_wy (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->wY
			]"
		end

	set_c_wy (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLGraphicsIn*)$an_item)->wY =  (PLFLT)$a_value
			]"
		ensure
			wy_set: a_value = c_wy (an_item)
		end

end
