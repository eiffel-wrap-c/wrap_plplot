note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class CORECRT_WSTDLIB_FUNCTIONS_API


feature -- Access

	itow_s (value: INTEGER; buffer: STRING_32; buffercount: INTEGER; radix: INTEGER): INTEGER 
		do
			Result := c_itow_s (value,  (create {NATIVE_STRING}.make (buffer)).item, buffercount, radix)
		end

	itow (value: INTEGER; buffer: STRING_32; radix: INTEGER): POINTER 
		do
			Result := c_itow (value,  (create {NATIVE_STRING}.make (buffer)).item, radix)
		end

	ltow_s (value: INTEGER; buffer: STRING_32; buffercount: INTEGER; radix: INTEGER): INTEGER 
		do
			Result := c_ltow_s (value,  (create {NATIVE_STRING}.make (buffer)).item, buffercount, radix)
		end

	ltow (value: INTEGER; buffer: STRING_32; radix: INTEGER): POINTER 
		do
			Result := c_ltow (value,  (create {NATIVE_STRING}.make (buffer)).item, radix)
		end

	ultow_s (value: INTEGER; buffer: STRING_32; buffercount: INTEGER; radix: INTEGER): INTEGER 
		do
			Result := c_ultow_s (value,  (create {NATIVE_STRING}.make (buffer)).item, buffercount, radix)
		end

	ultow (value: INTEGER; buffer: STRING_32; radix: INTEGER): POINTER 
		do
			Result := c_ultow (value,  (create {NATIVE_STRING}.make (buffer)).item, radix)
		end

	wcstod (string: STRING_32; endptr: POINTER): REAL_64 
		do
			Result := c_wcstod ( (create {NATIVE_STRING}.make (string)).item, endptr)
		end

	wcstod_l (string: STRING_32; endptr: POINTER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): REAL_64 
		do
			Result := c_wcstod_l ( (create {NATIVE_STRING}.make (string)).item, endptr, locale.item)
		end

	wcstol (string: STRING_32; endptr: POINTER; radix: INTEGER): INTEGER 
		do
			Result := c_wcstol ( (create {NATIVE_STRING}.make (string)).item, endptr, radix)
		end

	wcstol_l (string: STRING_32; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstol_l ( (create {NATIVE_STRING}.make (string)).item, endptr, radix, locale.item)
		end

	wcstoll (string: STRING_32; endptr: POINTER; radix: INTEGER): INTEGER 
		do
			Result := c_wcstoll ( (create {NATIVE_STRING}.make (string)).item, endptr, radix)
		end

	wcstoll_l (string: STRING_32; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstoll_l ( (create {NATIVE_STRING}.make (string)).item, endptr, radix, locale.item)
		end

	wcstoul (string: STRING_32; endptr: POINTER; radix: INTEGER): INTEGER 
		do
			Result := c_wcstoul ( (create {NATIVE_STRING}.make (string)).item, endptr, radix)
		end

	wcstoul_l (string: STRING_32; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstoul_l ( (create {NATIVE_STRING}.make (string)).item, endptr, radix, locale.item)
		end

	wcstoull (string: STRING_32; endptr: POINTER; radix: INTEGER): INTEGER 
		do
			Result := c_wcstoull ( (create {NATIVE_STRING}.make (string)).item, endptr, radix)
		end

	wcstoull_l (string: STRING_32; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstoull_l ( (create {NATIVE_STRING}.make (string)).item, endptr, radix, locale.item)
		end

	wcstold (string: STRING_32; endptr: POINTER): INTEGER 
		do
			Result := c_wcstold ( (create {NATIVE_STRING}.make (string)).item, endptr)
		end

	wcstold_l (string: STRING_32; endptr: POINTER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstold_l ( (create {NATIVE_STRING}.make (string)).item, endptr, locale.item)
		end

	wcstof (string: STRING_32; endptr: POINTER): REAL 
		do
			Result := c_wcstof ( (create {NATIVE_STRING}.make (string)).item, endptr)
		end

	wcstof_l (string: STRING_32; endptr: POINTER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): REAL 
		do
			Result := c_wcstof_l ( (create {NATIVE_STRING}.make (string)).item, endptr, locale.item)
		end

	wtof (string: STRING_32): REAL_64 
		do
			Result := c_wtof ( (create {NATIVE_STRING}.make (string)).item)
		end

	wtof_l (string: STRING_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): REAL_64 
		do
			Result := c_wtof_l ( (create {NATIVE_STRING}.make (string)).item, locale.item)
		end

	wtoi (string: STRING_32): INTEGER 
		do
			Result := c_wtoi ( (create {NATIVE_STRING}.make (string)).item)
		end

	wtoi_l (string: STRING_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wtoi_l ( (create {NATIVE_STRING}.make (string)).item, locale.item)
		end

	wtol (string: STRING_32): INTEGER 
		do
			Result := c_wtol ( (create {NATIVE_STRING}.make (string)).item)
		end

	wtol_l (string: STRING_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wtol_l ( (create {NATIVE_STRING}.make (string)).item, locale.item)
		end

	wtoll (string: STRING_32): INTEGER 
		do
			Result := c_wtoll ( (create {NATIVE_STRING}.make (string)).item)
		end

	wtoll_l (string: STRING_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wtoll_l ( (create {NATIVE_STRING}.make (string)).item, locale.item)
		end

	i64tow_s (value: INTEGER; buffer: STRING_32; buffercount: INTEGER; radix: INTEGER): INTEGER 
		do
			Result := c_i64tow_s (value,  (create {NATIVE_STRING}.make (buffer)).item, buffercount, radix)
		end

	i64tow (value: INTEGER; buffer: STRING_32; radix: INTEGER): POINTER 
		do
			Result := c_i64tow (value,  (create {NATIVE_STRING}.make (buffer)).item, radix)
		end

	ui64tow_s (value: INTEGER; buffer: STRING_32; buffercount: INTEGER; radix: INTEGER): INTEGER 
		do
			Result := c_ui64tow_s (value,  (create {NATIVE_STRING}.make (buffer)).item, buffercount, radix)
		end

	ui64tow (value: INTEGER; buffer: STRING_32; radix: INTEGER): POINTER 
		do
			Result := c_ui64tow (value,  (create {NATIVE_STRING}.make (buffer)).item, radix)
		end

	wtoi64 (string: STRING_32): INTEGER 
		do
			Result := c_wtoi64 ( (create {NATIVE_STRING}.make (string)).item)
		end

	wtoi64_l (string: STRING_32; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wtoi64_l ( (create {NATIVE_STRING}.make (string)).item, locale.item)
		end

	wcstoi64 (string: STRING_32; endptr: POINTER; radix: INTEGER): INTEGER 
		do
			Result := c_wcstoi64 ( (create {NATIVE_STRING}.make (string)).item, endptr, radix)
		end

	wcstoi64_l (string: STRING_32; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstoi64_l ( (create {NATIVE_STRING}.make (string)).item, endptr, radix, locale.item)
		end

	wcstoui64 (string: STRING_32; endptr: POINTER; radix: INTEGER): INTEGER 
		do
			Result := c_wcstoui64 ( (create {NATIVE_STRING}.make (string)).item, endptr, radix)
		end

	wcstoui64_l (string: STRING_32; endptr: POINTER; radix: INTEGER; locale: __CRT_LOCALE_POINTERS_STRUCT_API): INTEGER 
		do
			Result := c_wcstoui64_l ( (create {NATIVE_STRING}.make (string)).item, endptr, radix, locale.item)
		end

	wfullpath (buffer: STRING_32; path: STRING_32; buffercount: INTEGER): POINTER 
		do
			Result := c_wfullpath ( (create {NATIVE_STRING}.make (buffer)).item,  (create {NATIVE_STRING}.make (path)).item, buffercount)
		end

	wmakepath_s (buffer: STRING_32; buffercount: INTEGER; drive: STRING_32; dir: STRING_32; filename: STRING_32; ext: STRING_32): INTEGER 
		do
			Result := c_wmakepath_s ( (create {NATIVE_STRING}.make (buffer)).item, buffercount,  (create {NATIVE_STRING}.make (drive)).item,  (create {NATIVE_STRING}.make (dir)).item,  (create {NATIVE_STRING}.make (filename)).item,  (create {NATIVE_STRING}.make (ext)).item)
		end

	wmakepath (buffer: STRING_32; drive: STRING_32; dir: STRING_32; filename: STRING_32; ext: STRING_32) 
		do
			c_wmakepath ( (create {NATIVE_STRING}.make (buffer)).item,  (create {NATIVE_STRING}.make (drive)).item,  (create {NATIVE_STRING}.make (dir)).item,  (create {NATIVE_STRING}.make (filename)).item,  (create {NATIVE_STRING}.make (ext)).item)
		end

	wsplitpath (fullpath: STRING_32; drive: STRING_32; dir: STRING_32; filename: STRING_32; ext: STRING_32) 
		do
			c_wsplitpath ( (create {NATIVE_STRING}.make (fullpath)).item,  (create {NATIVE_STRING}.make (drive)).item,  (create {NATIVE_STRING}.make (dir)).item,  (create {NATIVE_STRING}.make (filename)).item,  (create {NATIVE_STRING}.make (ext)).item)
		end

	wsplitpath_s (fullpath: STRING_32; drive: STRING_32; drivecount: INTEGER; dir: STRING_32; dircount: INTEGER; filename: STRING_32; filenamecount: INTEGER; ext: STRING_32; extcount: INTEGER): INTEGER 
		do
			Result := c_wsplitpath_s ( (create {NATIVE_STRING}.make (fullpath)).item,  (create {NATIVE_STRING}.make (drive)).item, drivecount,  (create {NATIVE_STRING}.make (dir)).item, dircount,  (create {NATIVE_STRING}.make (filename)).item, filenamecount,  (create {NATIVE_STRING}.make (ext)).item, extcount)
		end

	wdupenv_s (buffer: POINTER; buffercount: POINTER; varname: STRING_32): INTEGER 
		do
			Result := c_wdupenv_s (buffer, buffercount,  (create {NATIVE_STRING}.make (varname)).item)
		end

	wgetenv (varname: STRING_32): POINTER 
		do
			Result := c_wgetenv ( (create {NATIVE_STRING}.make (varname)).item)
		end

	wgetenv_s (requiredcount: POINTER; buffer: STRING_32; buffercount: INTEGER; varname: STRING_32): INTEGER 
		do
			Result := c_wgetenv_s (requiredcount,  (create {NATIVE_STRING}.make (buffer)).item, buffercount,  (create {NATIVE_STRING}.make (varname)).item)
		end

	wputenv (envstring: STRING_32): INTEGER 
		do
			Result := c_wputenv ( (create {NATIVE_STRING}.make (envstring)).item)
		end

	wputenv_s (name: STRING_32; value: STRING_32): INTEGER 
		do
			Result := c_wputenv_s ( (create {NATIVE_STRING}.make (name)).item,  (create {NATIVE_STRING}.make (value)).item)
		end

	wsearchenv_s (filename: STRING_32; varname: STRING_32; buffer: STRING_32; buffercount: INTEGER): INTEGER 
		do
			Result := c_wsearchenv_s ( (create {NATIVE_STRING}.make (filename)).item,  (create {NATIVE_STRING}.make (varname)).item,  (create {NATIVE_STRING}.make (buffer)).item, buffercount)
		end

	wsearchenv (filename: STRING_32; varname: STRING_32; resultpath: STRING_32) 
		do
			c_wsearchenv ( (create {NATIVE_STRING}.make (filename)).item,  (create {NATIVE_STRING}.make (varname)).item,  (create {NATIVE_STRING}.make (resultpath)).item)
		end

	wsystem (command: STRING_32): INTEGER 
		do
			Result := c_wsystem ( (create {NATIVE_STRING}.make (command)).item)
		end

feature -- Externals

	c_itow_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _itow_s ((int)$value, (wchar_t*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_itow (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _itow ((int)$value, (wchar_t*)$buffer, (int)$radix);
			]"
		end

	c_ltow_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ltow_s ((long)$value, (wchar_t*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_ltow (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ltow ((long)$value, (wchar_t*)$buffer, (int)$radix);
			]"
		end

	c_ultow_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ultow_s ((unsigned long)$value, (wchar_t*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_ultow (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ultow ((unsigned long)$value, (wchar_t*)$buffer, (int)$radix);
			]"
		end

	c_wcstod (string: POINTER; endptr: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstod ((wchar_t const*)$string, (wchar_t**)$endptr);
			]"
		end

	c_wcstod_l (string: POINTER; endptr: POINTER; locale: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstod_l ((wchar_t const*)$string, (wchar_t**)$endptr, (_locale_t)$locale);
			]"
		end

	c_wcstol (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstol ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix);
			]"
		end

	c_wcstol_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstol_l ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_wcstoll (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstoll ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix);
			]"
		end

	c_wcstoll_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoll_l ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_wcstoul (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstoul ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix);
			]"
		end

	c_wcstoul_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoul_l ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_wcstoull (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstoull ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix);
			]"
		end

	c_wcstoull_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoull_l ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_wcstold (string: POINTER; endptr: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstold ((wchar_t const*)$string, (wchar_t**)$endptr);
			]"
		end

	c_wcstold_l (string: POINTER; endptr: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstold_l ((wchar_t const*)$string, (wchar_t**)$endptr, (_locale_t)$locale);
			]"
		end

	c_wcstof (string: POINTER; endptr: POINTER): REAL
		external
			"C inline use <plplot.h>"
		alias
			"[
				return wcstof ((wchar_t const*)$string, (wchar_t**)$endptr);
			]"
		end

	c_wcstof_l (string: POINTER; endptr: POINTER; locale: POINTER): REAL
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstof_l ((wchar_t const*)$string, (wchar_t**)$endptr, (_locale_t)$locale);
			]"
		end

	c_wtof (string: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtof ((wchar_t const*)$string);
			]"
		end

	c_wtof_l (string: POINTER; locale: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtof_l ((wchar_t const*)$string, (_locale_t)$locale);
			]"
		end

	c_wtoi (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtoi ((wchar_t const*)$string);
			]"
		end

	c_wtoi_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtoi_l ((wchar_t const*)$string, (_locale_t)$locale);
			]"
		end

	c_wtol (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtol ((wchar_t const*)$string);
			]"
		end

	c_wtol_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtol_l ((wchar_t const*)$string, (_locale_t)$locale);
			]"
		end

	c_wtoll (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtoll ((wchar_t const*)$string);
			]"
		end

	c_wtoll_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtoll_l ((wchar_t const*)$string, (_locale_t)$locale);
			]"
		end

	c_i64tow_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _i64tow_s ((__int64)$value, (wchar_t*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_i64tow (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _i64tow ((__int64)$value, (wchar_t*)$buffer, (int)$radix);
			]"
		end

	c_ui64tow_s (value: INTEGER; buffer: POINTER; buffercount: INTEGER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ui64tow_s ((unsigned __int64)$value, (wchar_t*)$buffer, (size_t)$buffercount, (int)$radix);
			]"
		end

	c_ui64tow (value: INTEGER; buffer: POINTER; radix: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _ui64tow ((unsigned __int64)$value, (wchar_t*)$buffer, (int)$radix);
			]"
		end

	c_wtoi64 (string: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtoi64 ((wchar_t const*)$string);
			]"
		end

	c_wtoi64_l (string: POINTER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wtoi64_l ((wchar_t const*)$string, (_locale_t)$locale);
			]"
		end

	c_wcstoi64 (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoi64 ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix);
			]"
		end

	c_wcstoi64_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoi64_l ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_wcstoui64 (string: POINTER; endptr: POINTER; radix: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoui64 ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix);
			]"
		end

	c_wcstoui64_l (string: POINTER; endptr: POINTER; radix: INTEGER; locale: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wcstoui64_l ((wchar_t const*)$string, (wchar_t**)$endptr, (int)$radix, (_locale_t)$locale);
			]"
		end

	c_wfullpath (buffer: POINTER; path: POINTER; buffercount: INTEGER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wfullpath ((wchar_t*)$buffer, (wchar_t const*)$path, (size_t)$buffercount);
			]"
		end

	c_wmakepath_s (buffer: POINTER; buffercount: INTEGER; drive: POINTER; dir: POINTER; filename: POINTER; ext: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wmakepath_s ((wchar_t*)$buffer, (size_t)$buffercount, (wchar_t const*)$drive, (wchar_t const*)$dir, (wchar_t const*)$filename, (wchar_t const*)$ext);
			]"
		end

	c_wmakepath (buffer: POINTER; drive: POINTER; dir: POINTER; filename: POINTER; ext: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_wmakepath ((wchar_t*)$buffer, (wchar_t const*)$drive, (wchar_t const*)$dir, (wchar_t const*)$filename, (wchar_t const*)$ext);
			]"
		end

	c_wsplitpath (fullpath: POINTER; drive: POINTER; dir: POINTER; filename: POINTER; ext: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_wsplitpath ((wchar_t const*)$fullpath, (wchar_t*)$drive, (wchar_t*)$dir, (wchar_t*)$filename, (wchar_t*)$ext);
			]"
		end

	c_wsplitpath_s (fullpath: POINTER; drive: POINTER; drivecount: INTEGER; dir: POINTER; dircount: INTEGER; filename: POINTER; filenamecount: INTEGER; ext: POINTER; extcount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wsplitpath_s ((wchar_t const*)$fullpath, (wchar_t*)$drive, (size_t)$drivecount, (wchar_t*)$dir, (size_t)$dircount, (wchar_t*)$filename, (size_t)$filenamecount, (wchar_t*)$ext, (size_t)$extcount);
			]"
		end

	c_wdupenv_s (buffer: POINTER; buffercount: POINTER; varname: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wdupenv_s ((wchar_t**)$buffer, (size_t*)$buffercount, (wchar_t const*)$varname);
			]"
		end

	c_wgetenv (varname: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wgetenv ((wchar_t const*)$varname);
			]"
		end

	c_wgetenv_s (requiredcount: POINTER; buffer: POINTER; buffercount: INTEGER; varname: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wgetenv_s ((size_t*)$requiredcount, (wchar_t*)$buffer, (size_t)$buffercount, (wchar_t const*)$varname);
			]"
		end

	c_wputenv (envstring: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wputenv ((wchar_t const*)$envstring);
			]"
		end

	c_wputenv_s (name: POINTER; value: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wputenv_s ((wchar_t const*)$name, (wchar_t const*)$value);
			]"
		end

	c_wsearchenv_s (filename: POINTER; varname: POINTER; buffer: POINTER; buffercount: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wsearchenv_s ((wchar_t const*)$filename, (wchar_t const*)$varname, (wchar_t*)$buffer, (size_t)$buffercount);
			]"
		end

	c_wsearchenv (filename: POINTER; varname: POINTER; resultpath: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				_wsearchenv ((wchar_t const*)$filename, (wchar_t const*)$varname, (wchar_t*)$resultpath);
			]"
		end

	c_wsystem (command: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return _wsystem ((wchar_t const*)$command);
			]"
		end

feature -- Externals Address

end
