note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PLCOLOR_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	r: INTEGER
			-- Access member `r`
		require
			exists: exists
		do
			Result := c_r (item)
		ensure
			result_correct: Result = c_r (item)
		end

	set_r (a_value: INTEGER) 
			-- Change the value of member `r` to `a_value`.
		require
			exists: exists
		do
			set_c_r (item, a_value)
		ensure
			r_set: a_value = r
		end

	g: INTEGER
			-- Access member `g`
		require
			exists: exists
		do
			Result := c_g (item)
		ensure
			result_correct: Result = c_g (item)
		end

	set_g (a_value: INTEGER) 
			-- Change the value of member `g` to `a_value`.
		require
			exists: exists
		do
			set_c_g (item, a_value)
		ensure
			g_set: a_value = g
		end

	b: INTEGER
			-- Access member `b`
		require
			exists: exists
		do
			Result := c_b (item)
		ensure
			result_correct: Result = c_b (item)
		end

	set_b (a_value: INTEGER) 
			-- Change the value of member `b` to `a_value`.
		require
			exists: exists
		do
			set_c_b (item, a_value)
		ensure
			b_set: a_value = b
		end

	a: REAL_64
			-- Access member `a`
		require
			exists: exists
		do
			Result := c_a (item)
		ensure
			result_correct: Result = c_a (item)
		end

	set_a (a_value: REAL_64) 
			-- Change the value of member `a` to `a_value`.
		require
			exists: exists
		do
			set_c_a (item, a_value)
		ensure
			a_set: a_value = a
		end

	name:  detachable STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, (create {C_STRING}.make (a_value)).item )
		end

feature {NONE} -- Implementation wrapper for struct PLColor

	sizeof_external: INTEGER 
		external
			"C inline use <plplot.h>"
		alias
			"sizeof(PLColor)"
		end

	c_r (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->r
			]"
		end

	set_c_r (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->r =  (unsigned char)$a_value
			]"
		ensure
			r_set: a_value = c_r (an_item)
		end

	c_g (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->g
			]"
		end

	set_c_g (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->g =  (unsigned char)$a_value
			]"
		ensure
			g_set: a_value = c_g (an_item)
		end

	c_b (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->b
			]"
		end

	set_c_b (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->b =  (unsigned char)$a_value
			]"
		ensure
			b_set: a_value = c_b (an_item)
		end

	c_a (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->a
			]"
		end

	set_c_a (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->a =  (PLFLT)$a_value
			]"
		ensure
			a_set: a_value = c_a (an_item)
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLColor*)$an_item)->name =  (PLCHAR_VECTOR)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

end
