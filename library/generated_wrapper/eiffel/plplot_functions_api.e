note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class PLPLOT_FUNCTIONS_API


feature -- Access

	c_pl_setcontlabelformat (lexp: INTEGER; sigdig: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pl_setcontlabelformat ((PLINT)$lexp, (PLINT)$sigdig);
			]"
		end

	c_pl_setcontlabelparam (offset: REAL_64; size: REAL_64; spacing: REAL_64; active: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pl_setcontlabelparam ((PLFLT)$offset, (PLFLT)$size, (PLFLT)$spacing, (PLINT)$active);
			]"
		end

	c_pladv (page: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pladv ((PLINT)$page);
			]"
		end

	c_plarc (x: REAL_64; y: REAL_64; a: REAL_64; b: REAL_64; angle1: REAL_64; angle2: REAL_64; rotate: REAL_64; fill: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plarc ((PLFLT)$x, (PLFLT)$y, (PLFLT)$a, (PLFLT)$b, (PLFLT)$angle1, (PLFLT)$angle2, (PLFLT)$rotate, (PLBOOL)$fill);
			]"
		end

	c_plaxes (x0: REAL_64; y0: REAL_64; xopt: STRING; xtick: REAL_64; nxsub: INTEGER; yopt: STRING; ytick: REAL_64; nysub: INTEGER) 
		do
			c_c_plaxes (x0, y0,  (create {C_STRING}.make (xopt)).item, xtick, nxsub,  (create {C_STRING}.make (yopt)).item, ytick, nysub)
		end

	c_plbin (nbin: INTEGER; x: POINTER; y: POINTER; opt: INTEGER) 
		do
			c_c_plbin (nbin, x, y, opt)
		end

	c_plbtime (year: POINTER; month: POINTER; day: POINTER; hour: POINTER; min: POINTER; sec: POINTER; ctime: REAL_64) 
		do
			c_c_plbtime (year, month, day, hour, min, sec, ctime)
		end

	c_plbop
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plbop ();
			]"
		end

	c_plbox (xopt: STRING; xtick: REAL_64; nxsub: INTEGER; yopt: STRING; ytick: REAL_64; nysub: INTEGER) 
		do
			c_c_plbox ( (create {C_STRING}.make (xopt)).item, xtick, nxsub,  (create {C_STRING}.make (yopt)).item, ytick, nysub)
		end

	c_plbox3 (xopt: STRING; xlabel: STRING; xtick: REAL_64; nxsub: INTEGER; yopt: STRING; ylabel: STRING; ytick: REAL_64; nysub: INTEGER; zopt: STRING; zlabel: STRING; ztick: REAL_64; nzsub: INTEGER) 
		do
			c_c_plbox3 ( (create {C_STRING}.make (xopt)).item,  (create {C_STRING}.make (xlabel)).item, xtick, nxsub,  (create {C_STRING}.make (yopt)).item,  (create {C_STRING}.make (ylabel)).item, ytick, nysub,  (create {C_STRING}.make (zopt)).item,  (create {C_STRING}.make (zlabel)).item, ztick, nzsub)
		end

	c_plcalc_world (rx: REAL_64; ry: REAL_64; wx: POINTER; wy: POINTER; window: POINTER) 
		do
			c_c_plcalc_world (rx, ry, wx, wy, window)
		end

	c_plclear
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plclear ();
			]"
		end

	c_plcol0 (icol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plcol0 ((PLINT)$icol0);
			]"
		end

	c_plcol1 (col1: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plcol1 ((PLFLT)$col1);
			]"
		end

	c_plconfigtime (scale: REAL_64; offset1: REAL_64; offset2: REAL_64; ccontrol: INTEGER; ifbtime_offset: INTEGER; year: INTEGER; month: INTEGER; day: INTEGER; hour: INTEGER; min: INTEGER; sec: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plconfigtime ((PLFLT)$scale, (PLFLT)$offset1, (PLFLT)$offset2, (PLINT)$ccontrol, (PLBOOL)$ifbtime_offset, (PLINT)$year, (PLINT)$month, (PLINT)$day, (PLINT)$hour, (PLINT)$min, (PLFLT)$sec);
			]"
		end

	c_plcont (f: POINTER; nx: INTEGER; ny: INTEGER; kx: INTEGER; lx: INTEGER; ky: INTEGER; ly: INTEGER; clevel: POINTER; nlevel: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_c_plcont (f, nx, ny, kx, lx, ky, ly, clevel, nlevel, pltr, pltr_data)
		end

	plfcont (f2eval: POINTER; f2eval_data: POINTER; nx: INTEGER; ny: INTEGER; kx: INTEGER; lx: INTEGER; ky: INTEGER; ly: INTEGER; clevel: POINTER; nlevel: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plfcont (f2eval, f2eval_data, nx, ny, kx, lx, ky, ly, clevel, nlevel, pltr, pltr_data)
		end

	c_plcpstrm (iplsr: INTEGER; flags: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plcpstrm ((PLINT)$iplsr, (PLBOOL)$flags);
			]"
		end

	c_plctime (year: INTEGER; month: INTEGER; day: INTEGER; hour: INTEGER; min: INTEGER; sec: REAL_64; ctime: POINTER) 
		do
			c_c_plctime (year, month, day, hour, min, sec, ctime)
		end

	pldid2pc (xmin: POINTER; ymin: POINTER; xmax: POINTER; ymax: POINTER) 
		do
			c_pldid2pc (xmin, ymin, xmax, ymax)
		end

	pldip2dc (xmin: POINTER; ymin: POINTER; xmax: POINTER; ymax: POINTER) 
		do
			c_pldip2dc (xmin, ymin, xmax, ymax)
		end

	c_plend
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plend ();
			]"
		end

	c_plend1
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plend1 ();
			]"
		end

	c_plenv (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; just: INTEGER; axis: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plenv ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLINT)$just, (PLINT)$axis);
			]"
		end

	c_plenv0 (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; just: INTEGER; axis: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plenv0 ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLINT)$just, (PLINT)$axis);
			]"
		end

	c_pleop
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pleop ();
			]"
		end

	c_plerrx (n: INTEGER; xmin: POINTER; xmax: POINTER; y: POINTER) 
		do
			c_c_plerrx (n, xmin, xmax, y)
		end

	c_plerry (n: INTEGER; x: POINTER; ymin: POINTER; ymax: POINTER) 
		do
			c_c_plerry (n, x, ymin, ymax)
		end

	c_plfamadv
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plfamadv ();
			]"
		end

	c_plfill (n: INTEGER; x: POINTER; y: POINTER) 
		do
			c_c_plfill (n, x, y)
		end

	c_plfill3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER) 
		do
			c_c_plfill3 (n, x, y, z)
		end

	c_plflush
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plflush ();
			]"
		end

	c_plfont (ifont: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plfont ((PLINT)$ifont);
			]"
		end

	c_plfontld (fnt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plfontld ((PLINT)$fnt);
			]"
		end

	c_plgchr (p_def: POINTER; p_ht: POINTER) 
		do
			c_c_plgchr (p_def, p_ht)
		end

	c_plgcmap1_range (min_color: POINTER; max_color: POINTER) 
		do
			c_c_plgcmap1_range (min_color, max_color)
		end

	c_plgcol0 (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER) 
		do
			c_c_plgcol0 (icol0, r, g, b)
		end

	c_plgcol0a (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER; alpha: POINTER) 
		do
			c_c_plgcol0a (icol0, r, g, b, alpha)
		end

	c_plgcolbg (r: POINTER; g: POINTER; b: POINTER) 
		do
			c_c_plgcolbg (r, g, b)
		end

	c_plgcolbga (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER) 
		do
			c_c_plgcolbga (r, g, b, alpha)
		end

	c_plgcompression (compression: POINTER) 
		do
			c_c_plgcompression (compression)
		end

	c_plgdev (p_dev: STRING) 
		do
			c_c_plgdev ( (create {C_STRING}.make (p_dev)).item)
		end

	c_plgdidev (p_mar: POINTER; p_aspect: POINTER; p_jx: POINTER; p_jy: POINTER) 
		do
			c_c_plgdidev (p_mar, p_aspect, p_jx, p_jy)
		end

	c_plgdiori (p_rot: POINTER) 
		do
			c_c_plgdiori (p_rot)
		end

	c_plgdiplt (p_xmin: POINTER; p_ymin: POINTER; p_xmax: POINTER; p_ymax: POINTER) 
		do
			c_c_plgdiplt (p_xmin, p_ymin, p_xmax, p_ymax)
		end

	c_plgdrawmode: INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return c_plgdrawmode ();
			]"
		end

	c_plgfci (p_fci: POINTER) 
		do
			c_c_plgfci (p_fci)
		end

	c_plgfam (p_fam: POINTER; p_num: POINTER; p_bmax: POINTER) 
		do
			c_c_plgfam (p_fam, p_num, p_bmax)
		end

	c_plgfnam (fnam: STRING) 
		do
			c_c_plgfnam ( (create {C_STRING}.make (fnam)).item)
		end

	c_plgfont (p_family: POINTER; p_style: POINTER; p_weight: POINTER) 
		do
			c_c_plgfont (p_family, p_style, p_weight)
		end

	c_plglevel (p_level: POINTER) 
		do
			c_c_plglevel (p_level)
		end

	c_plgpage (p_xp: POINTER; p_yp: POINTER; p_xleng: POINTER; p_yleng: POINTER; p_xoff: POINTER; p_yoff: POINTER) 
		do
			c_c_plgpage (p_xp, p_yp, p_xleng, p_yleng, p_xoff, p_yoff)
		end

	c_plgra
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgra ();
			]"
		end

	c_plgradient (n: INTEGER; x: POINTER; y: POINTER; angle: REAL_64) 
		do
			c_c_plgradient (n, x, y, angle)
		end

	c_plgriddata (x: POINTER; y: POINTER; z: POINTER; npts: INTEGER; xg: POINTER; nptsx: INTEGER; yg: POINTER; nptsy: INTEGER; zg: POINTER; type: INTEGER; data: REAL_64) 
		do
			c_c_plgriddata (x, y, z, npts, xg, nptsx, yg, nptsy, zg, type, data)
		end

	plfgriddata (x: POINTER; y: POINTER; z: POINTER; npts: INTEGER; xg: POINTER; nptsx: INTEGER; yg: POINTER; nptsy: INTEGER; zops: PLF2OPS_T_STRUCT_API; zgp: POINTER; type: INTEGER; data: REAL_64) 
		do
			c_plfgriddata (x, y, z, npts, xg, nptsx, yg, nptsy, zops.item, zgp, type, data)
		end

	c_plgspa (xmin: POINTER; xmax: POINTER; ymin: POINTER; ymax: POINTER) 
		do
			c_c_plgspa (xmin, xmax, ymin, ymax)
		end

	c_plgstrm (p_strm: POINTER) 
		do
			c_c_plgstrm (p_strm)
		end

	c_plgver (p_ver: STRING) 
		do
			c_c_plgver ( (create {C_STRING}.make (p_ver)).item)
		end

	c_plgvpd (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER) 
		do
			c_c_plgvpd (p_xmin, p_xmax, p_ymin, p_ymax)
		end

	c_plgvpw (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER) 
		do
			c_c_plgvpw (p_xmin, p_xmax, p_ymin, p_ymax)
		end

	c_plgxax (p_digmax: POINTER; p_digits: POINTER) 
		do
			c_c_plgxax (p_digmax, p_digits)
		end

	c_plgyax (p_digmax: POINTER; p_digits: POINTER) 
		do
			c_c_plgyax (p_digmax, p_digits)
		end

	c_plgzax (p_digmax: POINTER; p_digits: POINTER) 
		do
			c_c_plgzax (p_digmax, p_digits)
		end

	c_plhist (n: INTEGER; data: POINTER; datmin: REAL_64; datmax: REAL_64; nbin: INTEGER; opt: INTEGER) 
		do
			c_c_plhist (n, data, datmin, datmax, nbin, opt)
		end

	c_plhlsrgb (h: REAL_64; l: REAL_64; s: REAL_64; p_r: POINTER; p_g: POINTER; p_b: POINTER) 
		do
			c_c_plhlsrgb (h, l, s, p_r, p_g, p_b)
		end

	c_plinit
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plinit ();
			]"
		end

	c_pljoin (x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pljoin ((PLFLT)$x1, (PLFLT)$y1, (PLFLT)$x2, (PLFLT)$y2);
			]"
		end

	c_pllab (xlabel: STRING; ylabel: STRING; tlabel: STRING) 
		do
			c_c_pllab ( (create {C_STRING}.make (xlabel)).item,  (create {C_STRING}.make (ylabel)).item,  (create {C_STRING}.make (tlabel)).item)
		end

	c_pllegend (p_legend_width: POINTER; p_legend_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; plot_width: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; nrow: INTEGER; ncolumn: INTEGER; nlegend: INTEGER; opt_array: POINTER; text_offset: REAL_64; text_scale: REAL_64; text_spacing: REAL_64; text_justification: REAL_64; text_colors: POINTER; text: STRING; box_colors: POINTER; box_patterns: POINTER; box_scales: POINTER; box_line_widths: POINTER; line_colors: POINTER; line_styles: POINTER; line_widths: POINTER; symbol_colors: POINTER; symbol_scales: POINTER; symbol_numbers: POINTER; symbols: STRING) 
		do
			c_c_pllegend (p_legend_width, p_legend_height, opt, position, x, y, plot_width, bg_color, bb_color, bb_style, nrow, ncolumn, nlegend, opt_array, text_offset, text_scale, text_spacing, text_justification, text_colors,  (create {C_STRING}.make (text)).item, box_colors, box_patterns, box_scales, box_line_widths, line_colors, line_styles, line_widths, symbol_colors, symbol_scales, symbol_numbers,  (create {C_STRING}.make (symbols)).item)
		end

	c_plcolorbar (p_colorbar_width: POINTER; p_colorbar_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; x_length: REAL_64; y_length: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; low_cap_color: REAL_64; high_cap_color: REAL_64; cont_color: INTEGER; cont_width: REAL_64; n_labels: INTEGER; label_opts: POINTER; labels: STRING; n_axes: INTEGER; axis_opts: STRING; ticks: POINTER; sub_ticks: POINTER; n_values: POINTER; values: POINTER) 
		do
			c_c_plcolorbar (p_colorbar_width, p_colorbar_height, opt, position, x, y, x_length, y_length, bg_color, bb_color, bb_style, low_cap_color, high_cap_color, cont_color, cont_width, n_labels, label_opts,  (create {C_STRING}.make (labels)).item, n_axes,  (create {C_STRING}.make (axis_opts)).item, ticks, sub_ticks, n_values, values)
		end

	c_pllightsource (x: REAL_64; y: REAL_64; z: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pllightsource ((PLFLT)$x, (PLFLT)$y, (PLFLT)$z);
			]"
		end

	c_plline (n: INTEGER; x: POINTER; y: POINTER) 
		do
			c_c_plline (n, x, y)
		end

	c_plline3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER) 
		do
			c_c_plline3 (n, x, y, z)
		end

	c_pllsty (lin: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pllsty ((PLINT)$lin);
			]"
		end

	c_plmap (mapform: POINTER; name: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64) 
		do
			c_c_plmap (mapform,  (create {C_STRING}.make (name)).item, minx, maxx, miny, maxy)
		end

	c_plmapline (mapform: POINTER; name: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER) 
		do
			c_c_plmapline (mapform,  (create {C_STRING}.make (name)).item, minx, maxx, miny, maxy, plotentries, nplotentries)
		end

	c_plmapstring (mapform: POINTER; name: STRING; string: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER) 
		do
			c_c_plmapstring (mapform,  (create {C_STRING}.make (name)).item,  (create {C_STRING}.make (string)).item, minx, maxx, miny, maxy, plotentries, nplotentries)
		end

	c_plmaptex (mapform: POINTER; name: STRING; dx: REAL_64; dy: REAL_64; just: REAL_64; text: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentry: INTEGER) 
		do
			c_c_plmaptex (mapform,  (create {C_STRING}.make (name)).item, dx, dy, just,  (create {C_STRING}.make (text)).item, minx, maxx, miny, maxy, plotentry)
		end

	c_plmapfill (mapform: POINTER; name: STRING; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER) 
		do
			c_c_plmapfill (mapform,  (create {C_STRING}.make (name)).item, minx, maxx, miny, maxy, plotentries, nplotentries)
		end

	c_plmeridians (mapform: POINTER; dlong: REAL_64; dlat: REAL_64; minlong: REAL_64; maxlong: REAL_64; minlat: REAL_64; maxlat: REAL_64) 
		do
			c_c_plmeridians (mapform, dlong, dlat, minlong, maxlong, minlat, maxlat)
		end

	c_plmesh (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER) 
		do
			c_c_plmesh (x, y, z, nx, ny, opt)
		end

	plfmesh (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER) 
		do
			c_plfmesh (x, y, zops.item, zp, nx, ny, opt)
		end

	c_plmeshc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_c_plmeshc (x, y, z, nx, ny, opt, clevel, nlevel)
		end

	plfmeshc (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_plfmeshc (x, y, zops.item, zp, nx, ny, opt, clevel, nlevel)
		end

	c_plmkstrm (p_strm: POINTER) 
		do
			c_c_plmkstrm (p_strm)
		end

	c_plmtex (side: STRING; disp: REAL_64; pos: REAL_64; just: REAL_64; text: STRING) 
		do
			c_c_plmtex ( (create {C_STRING}.make (side)).item, disp, pos, just,  (create {C_STRING}.make (text)).item)
		end

	c_plmtex3 (side: STRING; disp: REAL_64; pos: REAL_64; just: REAL_64; text: STRING) 
		do
			c_c_plmtex3 ( (create {C_STRING}.make (side)).item, disp, pos, just,  (create {C_STRING}.make (text)).item)
		end

	c_plot3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; side: INTEGER) 
		do
			c_c_plot3d (x, y, z, nx, ny, opt, side)
		end

	plfplot3d (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; side: INTEGER) 
		do
			c_plfplot3d (x, y, zops.item, zp, nx, ny, opt, side)
		end

	c_plot3dc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_c_plot3dc (x, y, z, nx, ny, opt, clevel, nlevel)
		end

	plfplot3dc (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_plfplot3dc (x, y, zops.item, zp, nx, ny, opt, clevel, nlevel)
		end

	c_plot3dcl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER) 
		do
			c_c_plot3dcl (x, y, z, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)
		end

	plfplot3dcl (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER) 
		do
			c_plfplot3dcl (x, y, zops.item, zp, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)
		end

	c_plpat (nlin: INTEGER; inc: POINTER; del: POINTER) 
		do
			c_c_plpat (nlin, inc, del)
		end

	c_plpath (n: INTEGER; x1: REAL_64; y1: REAL_64; x2: REAL_64; y2: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plpath ((PLINT)$n, (PLFLT)$x1, (PLFLT)$y1, (PLFLT)$x2, (PLFLT)$y2);
			]"
		end

	c_plpoin (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER) 
		do
			c_c_plpoin (n, x, y, code)
		end

	c_plpoin3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; code: INTEGER) 
		do
			c_c_plpoin3 (n, x, y, z, code)
		end

	c_plpoly3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; draw: POINTER; ifcc: INTEGER) 
		do
			c_c_plpoly3 (n, x, y, z, draw, ifcc)
		end

	c_plprec (setp: INTEGER; prec: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plprec ((PLINT)$setp, (PLINT)$prec);
			]"
		end

	c_plpsty (patt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plpsty ((PLINT)$patt);
			]"
		end

	c_plptex (x: REAL_64; y: REAL_64; dx: REAL_64; dy: REAL_64; just: REAL_64; text: STRING) 
		do
			c_c_plptex (x, y, dx, dy, just,  (create {C_STRING}.make (text)).item)
		end

	c_plptex3 (wx: REAL_64; wy: REAL_64; wz: REAL_64; dx: REAL_64; dy: REAL_64; dz: REAL_64; sx: REAL_64; sy: REAL_64; sz: REAL_64; just: REAL_64; text: STRING) 
		do
			c_c_plptex3 (wx, wy, wz, dx, dy, dz, sx, sy, sz, just,  (create {C_STRING}.make (text)).item)
		end

	c_plrandd: REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return c_plrandd ();
			]"
		end

	c_plreplot
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plreplot ();
			]"
		end

	c_plrgbhls (r: REAL_64; g: REAL_64; b: REAL_64; p_h: POINTER; p_l: POINTER; p_s: POINTER) 
		do
			c_c_plrgbhls (r, g, b, p_h, p_l, p_s)
		end

	c_plschr (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plschr ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	c_plscmap0 (r: POINTER; g: POINTER; b: POINTER; ncol0: INTEGER) 
		do
			c_c_plscmap0 (r, g, b, ncol0)
		end

	c_plscmap0a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol0: INTEGER) 
		do
			c_c_plscmap0a (r, g, b, alpha, ncol0)
		end

	c_plscmap0n (ncol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap0n ((PLINT)$ncol0);
			]"
		end

	c_plscmap1 (r: POINTER; g: POINTER; b: POINTER; ncol1: INTEGER) 
		do
			c_c_plscmap1 (r, g, b, ncol1)
		end

	c_plscmap1a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol1: INTEGER) 
		do
			c_c_plscmap1a (r, g, b, alpha, ncol1)
		end

	c_plscmap1l (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alt_hue_path: POINTER) 
		do
			c_c_plscmap1l (itype, npts, intensity, coord1, coord2, coord3, alt_hue_path)
		end

	c_plscmap1la (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alpha: POINTER; alt_hue_path: POINTER) 
		do
			c_c_plscmap1la (itype, npts, intensity, coord1, coord2, coord3, alpha, alt_hue_path)
		end

	c_plscmap1n (ncol1: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap1n ((PLINT)$ncol1);
			]"
		end

	c_plscmap1_range (min_color: REAL_64; max_color: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap1_range ((PLFLT)$min_color, (PLFLT)$max_color);
			]"
		end

	c_plscol0 (icol0: INTEGER; r: INTEGER; g: INTEGER; b: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscol0 ((PLINT)$icol0, (PLINT)$r, (PLINT)$g, (PLINT)$b);
			]"
		end

	c_plscol0a (icol0: INTEGER; r: INTEGER; g: INTEGER; b: INTEGER; alpha: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscol0a ((PLINT)$icol0, (PLINT)$r, (PLINT)$g, (PLINT)$b, (PLFLT)$alpha);
			]"
		end

	c_plscolbg (r: INTEGER; g: INTEGER; b: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscolbg ((PLINT)$r, (PLINT)$g, (PLINT)$b);
			]"
		end

	c_plscolbga (r: INTEGER; g: INTEGER; b: INTEGER; alpha: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscolbga ((PLINT)$r, (PLINT)$g, (PLINT)$b, (PLFLT)$alpha);
			]"
		end

	c_plscolor (color: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscolor ((PLINT)$color);
			]"
		end

	c_plscompression (compression: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscompression ((PLINT)$compression);
			]"
		end

	c_plsdev (devname: STRING) 
		do
			c_c_plsdev ( (create {C_STRING}.make (devname)).item)
		end

	c_plsdidev (mar: REAL_64; aspect: REAL_64; jx: REAL_64; jy: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdidev ((PLFLT)$mar, (PLFLT)$aspect, (PLFLT)$jx, (PLFLT)$jy);
			]"
		end

	c_plsdimap (dimxmin: INTEGER; dimxmax: INTEGER; dimymin: INTEGER; dimymax: INTEGER; dimxpmm: REAL_64; dimypmm: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdimap ((PLINT)$dimxmin, (PLINT)$dimxmax, (PLINT)$dimymin, (PLINT)$dimymax, (PLFLT)$dimxpmm, (PLFLT)$dimypmm);
			]"
		end

	c_plsdiori (rot: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdiori ((PLFLT)$rot);
			]"
		end

	c_plsdiplt (xmin: REAL_64; ymin: REAL_64; xmax: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdiplt ((PLFLT)$xmin, (PLFLT)$ymin, (PLFLT)$xmax, (PLFLT)$ymax);
			]"
		end

	c_plsdiplz (xmin: REAL_64; ymin: REAL_64; xmax: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdiplz ((PLFLT)$xmin, (PLFLT)$ymin, (PLFLT)$xmax, (PLFLT)$ymax);
			]"
		end

	c_plsdrawmode (mode: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdrawmode ((PLINT)$mode);
			]"
		end

	c_plseed (seed: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plseed ((unsigned int)$seed);
			]"
		end

	c_plsesc (esc: CHARACTER) 
		do
			c_c_plsesc (esc)
		end

	c_plsfam (fam: INTEGER; num: INTEGER; bmax: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsfam ((PLINT)$fam, (PLINT)$num, (PLINT)$bmax);
			]"
		end

	c_plsfci (fci: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsfci ((PLUNICODE)$fci);
			]"
		end

	c_plsfnam (fnam: STRING) 
		do
			c_c_plsfnam ( (create {C_STRING}.make (fnam)).item)
		end

	c_plsfont (family: INTEGER; style: INTEGER; weight: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsfont ((PLINT)$family, (PLINT)$style, (PLINT)$weight);
			]"
		end

	c_plshade (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_c_plshade (a, nx, ny, defined, xmin, xmax, ymin, ymax, shade_min, shade_max, sh_cmap, sh_color, sh_width, min_color, min_width, max_color, max_width, fill, rectangular, pltr, pltr_data)
		end

	c_plshades (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; clevel: POINTER; nlevel: INTEGER; fill_width: REAL_64; cont_color: INTEGER; cont_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_c_plshades (a, nx, ny, defined, xmin, xmax, ymin, ymax, clevel, nlevel, fill_width, cont_color, cont_width, fill, rectangular, pltr, pltr_data)
		end

	plfshades (zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; clevel: POINTER; nlevel: INTEGER; fill_width: REAL_64; cont_color: INTEGER; cont_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plfshades (zops.item, zp, nx, ny, defined, xmin, xmax, ymin, ymax, clevel, nlevel, fill_width, cont_color, cont_width, fill, rectangular, pltr, pltr_data)
		end

	plfshade (f2eval: POINTER; f2eval_data: POINTER; c2eval: POINTER; c2eval_data: POINTER; nx: INTEGER; ny: INTEGER; left: REAL_64; right: REAL_64; bottom: REAL_64; top: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plfshade (f2eval, f2eval_data, c2eval, c2eval_data, nx, ny, left, right, bottom, top, shade_min, shade_max, sh_cmap, sh_color, sh_width, min_color, min_width, max_color, max_width, fill, rectangular, pltr, pltr_data)
		end

	plfshade1 (zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plfshade1 (zops.item, zp, nx, ny, defined, xmin, xmax, ymin, ymax, shade_min, shade_max, sh_cmap, sh_color, sh_width, min_color, min_width, max_color, max_width, fill, rectangular, pltr, pltr_data)
		end

	c_plslabelfunc (label_func: POINTER; label_data: POINTER) 
		do
			c_c_plslabelfunc (label_func, label_data)
		end

	c_plsmaj (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsmaj ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	c_plsmem (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER) 
		do
			c_c_plsmem (maxx, maxy, plotmem)
		end

	c_plsmema (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER) 
		do
			c_c_plsmema (maxx, maxy, plotmem)
		end

	c_plsmin (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsmin ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	c_plsori (ori: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsori ((PLINT)$ori);
			]"
		end

	c_plspage (xp: REAL_64; yp: REAL_64; xleng: INTEGER; yleng: INTEGER; xoff: INTEGER; yoff: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plspage ((PLFLT)$xp, (PLFLT)$yp, (PLINT)$xleng, (PLINT)$yleng, (PLINT)$xoff, (PLINT)$yoff);
			]"
		end

	c_plspal0 (filename: STRING) 
		do
			c_c_plspal0 ( (create {C_STRING}.make (filename)).item)
		end

	c_plspal1 (filename: STRING; interpolate: INTEGER) 
		do
			c_c_plspal1 ( (create {C_STRING}.make (filename)).item, interpolate)
		end

	c_plspause (pause: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plspause ((PLBOOL)$pause);
			]"
		end

	c_plsstrm (strm: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsstrm ((PLINT)$strm);
			]"
		end

	c_plssub (nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plssub ((PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_plssym (def: REAL_64; scale: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plssym ((PLFLT)$def, (PLFLT)$scale);
			]"
		end

	c_plstar (nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstar ((PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_plstart (devname: STRING; nx: INTEGER; ny: INTEGER) 
		do
			c_c_plstart ( (create {C_STRING}.make (devname)).item, nx, ny)
		end

	c_plstransform (coordinate_transform: POINTER; coordinate_transform_data: POINTER) 
		do
			c_c_plstransform (coordinate_transform, coordinate_transform_data)
		end

	c_plstring (n: INTEGER; x: POINTER; y: POINTER; string: STRING) 
		do
			c_c_plstring (n, x, y,  (create {C_STRING}.make (string)).item)
		end

	c_plstring3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; string: STRING) 
		do
			c_c_plstring3 (n, x, y, z,  (create {C_STRING}.make (string)).item)
		end

	c_plstripa (id: INTEGER; pen: INTEGER; x: REAL_64; y: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstripa ((PLINT)$id, (PLINT)$pen, (PLFLT)$x, (PLFLT)$y);
			]"
		end

	c_plstripc (id: POINTER; xspec: STRING; yspec: STRING; xmin: REAL_64; xmax: REAL_64; xjump: REAL_64; ymin: REAL_64; ymax: REAL_64; xlpos: REAL_64; ylpos: REAL_64; y_ascl: INTEGER; acc: INTEGER; colbox: INTEGER; collab: INTEGER; colline: POINTER; styline: POINTER; legline: STRING; labx: STRING; laby: STRING; labtop: STRING) 
		do
			c_c_plstripc (id,  (create {C_STRING}.make (xspec)).item,  (create {C_STRING}.make (yspec)).item, xmin, xmax, xjump, ymin, ymax, xlpos, ylpos, y_ascl, acc, colbox, collab, colline, styline,  (create {C_STRING}.make (legline)).item,  (create {C_STRING}.make (labx)).item,  (create {C_STRING}.make (laby)).item,  (create {C_STRING}.make (labtop)).item)
		end

	c_plstripd (id: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstripd ((PLINT)$id);
			]"
		end

	c_plimagefr (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; valuemin: REAL_64; valuemax: REAL_64; pltr: POINTER; pltr_data: POINTER) 
		do
			c_c_plimagefr (idata, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, valuemin, valuemax, pltr, pltr_data)
		end

	plfimagefr (idataops: PLF2OPS_T_STRUCT_API; idatap: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; valuemin: REAL_64; valuemax: REAL_64; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plfimagefr (idataops.item, idatap, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, valuemin, valuemax, pltr, pltr_data)
		end

	c_plimage (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; dxmin: REAL_64; dxmax: REAL_64; dymin: REAL_64; dymax: REAL_64) 
		do
			c_c_plimage (idata, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, dxmin, dxmax, dymin, dymax)
		end

	plfimage (idataops: PLF2OPS_T_STRUCT_API; idatap: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; dxmin: REAL_64; dxmax: REAL_64; dymin: REAL_64; dymax: REAL_64) 
		do
			c_plfimage (idataops.item, idatap, nx, ny, xmin, xmax, ymin, ymax, zmin, zmax, dxmin, dxmax, dymin, dymax)
		end

	c_plstyl (nms: INTEGER; mark: POINTER; space: POINTER) 
		do
			c_c_plstyl (nms, mark, space)
		end

	c_plsurf3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_c_plsurf3d (x, y, z, nx, ny, opt, clevel, nlevel)
		end

	plfsurf3d (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER) 
		do
			c_plfsurf3d (x, y, zops.item, zp, nx, ny, opt, clevel, nlevel)
		end

	c_plsurf3dl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER) 
		do
			c_c_plsurf3dl (x, y, z, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)
		end

	plfsurf3dl (x: POINTER; y: POINTER; zops: PLF2OPS_T_STRUCT_API; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER) 
		do
			c_plfsurf3dl (x, y, zops.item, zp, nx, ny, opt, clevel, nlevel, indexxmin, indexxmax, indexymin, indexymax)
		end

	c_plsvect (arrowx: POINTER; arrowy: POINTER; npts: INTEGER; fill: INTEGER) 
		do
			c_c_plsvect (arrowx, arrowy, npts, fill)
		end

	c_plsvpa (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsvpa ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax);
			]"
		end

	c_plsxax (digmax: INTEGER; digits: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsxax ((PLINT)$digmax, (PLINT)$digits);
			]"
		end

	plsxwin (window_id: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsxwin ((PLINT)$window_id);
			]"
		end

	c_plsyax (digmax: INTEGER; digits: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsyax ((PLINT)$digmax, (PLINT)$digits);
			]"
		end

	c_plsym (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER) 
		do
			c_c_plsym (n, x, y, code)
		end

	c_plszax (digmax: INTEGER; digits: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plszax ((PLINT)$digmax, (PLINT)$digits);
			]"
		end

	c_pltext
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pltext ();
			]"
		end

	c_pltimefmt (fmt: STRING) 
		do
			c_c_pltimefmt ( (create {C_STRING}.make (fmt)).item)
		end

	c_plvasp (aspect: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plvasp ((PLFLT)$aspect);
			]"
		end

	c_plvect (u: POINTER; v: POINTER; nx: INTEGER; ny: INTEGER; scale: REAL_64; pltr: POINTER; pltr_data: POINTER) 
		do
			c_c_plvect (u, v, nx, ny, scale, pltr, pltr_data)
		end

	plfvect (getuv: POINTER; up: POINTER; vp: POINTER; nx: INTEGER; ny: INTEGER; scale: REAL_64; pltr: POINTER; pltr_data: POINTER) 
		do
			c_plfvect (getuv, up, vp, nx, ny, scale, pltr, pltr_data)
		end

	c_plvpas (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; aspect: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plvpas ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$aspect);
			]"
		end

	c_plvpor (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plvpor ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax);
			]"
		end

	c_plvsta
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plvsta ();
			]"
		end

	c_plw3d (basex: REAL_64; basey: REAL_64; height: REAL_64; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; alt: REAL_64; az: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plw3d ((PLFLT)$basex, (PLFLT)$basey, (PLFLT)$height, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$alt, (PLFLT)$az);
			]"
		end

	c_plwidth (width: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plwidth ((PLFLT)$width);
			]"
		end

	c_plwind (xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plwind ((PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax);
			]"
		end

	c_plxormod (mode: INTEGER; status: POINTER) 
		do
			c_c_plxormod (mode, status)
		end

	plg_file_devs (p_menustr: POINTER; p_devname: POINTER; p_ndev: POINTER) 
		do
			c_plg_file_devs (p_menustr, p_devname, p_ndev)
		end

	plg_devs (p_menustr: POINTER; p_devname: POINTER; p_ndev: POINTER) 
		do
			c_plg_devs (p_menustr, p_devname, p_ndev)
		end

	pls_key_eh (keyeh: POINTER; keyeh_data: POINTER) 
		do
			c_pls_key_eh (keyeh, keyeh_data)
		end

	pls_button_eh (buttoneh: POINTER; buttoneh_data: POINTER) 
		do
			c_pls_button_eh (buttoneh, buttoneh_data)
		end

	plsbop_h (handler: POINTER; handler_data: POINTER) 
		do
			c_plsbop_h (handler, handler_data)
		end

	plseop_h (handler: POINTER; handler_data: POINTER) 
		do
			c_plseop_h (handler, handler_data)
		end

	pls_error (errcode: POINTER; errmsg: STRING) 
		do
			c_pls_error (errcode,  (create {C_STRING}.make (errmsg)).item)
		end

	plsexit (handler: POINTER) 
		do
			c_plsexit (handler)
		end

	plsabort (handler: POINTER) 
		do
			c_plsabort (handler)
		end

	pltr0 (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER) 
		do
			c_pltr0 (x, y, tx, ty, pltr_data)
		end

	pltr1 (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER) 
		do
			c_pltr1 (x, y, tx, ty, pltr_data)
		end

	pltr2 (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER) 
		do
			c_pltr2 (x, y, tx, ty, pltr_data)
		end

	pltr2p (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER) 
		do
			c_pltr2p (x, y, tx, ty, pltr_data)
		end

	pltr2f (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER) 
		do
			c_pltr2f (x, y, tx, ty, pltr_data)
		end

	plf2ops_c: detachable PLF2OPS_T_STRUCT_API 
		do
			if attached c_plf2ops_c as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	plf2ops_grid_c: detachable PLF2OPS_T_STRUCT_API 
		do
			if attached c_plf2ops_grid_c as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	plf2ops_grid_row_major: detachable PLF2OPS_T_STRUCT_API 
		do
			if attached c_plf2ops_grid_row_major as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	plf2ops_grid_col_major: detachable PLF2OPS_T_STRUCT_API 
		do
			if attached c_plf2ops_grid_col_major as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	plf2eval1 (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64 
		do
			Result := c_plf2eval1 (ix, iy, plf2eval_data)
		end

	plf2eval2 (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64 
		do
			Result := c_plf2eval2 (ix, iy, plf2eval_data)
		end

	plf2eval (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64 
		do
			Result := c_plf2eval (ix, iy, plf2eval_data)
		end

	plf2evalr (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64 
		do
			Result := c_plf2evalr (ix, iy, plf2eval_data)
		end

	pl_clear_opts
		external
			"C inline use <plplot.h>"
		alias
			"[
				plClearOpts ();
			]"
		end

	pl_reset_opts
		external
			"C inline use <plplot.h>"
		alias
			"[
				plResetOpts ();
			]"
		end

	pl_merge_opts (options: PLOPTIONTABLE_STRUCT_API; name: STRING; notes: POINTER): INTEGER 
		do
			Result := c_pl_merge_opts (options.item,  (create {C_STRING}.make (name)).item, notes)
		end

	pl_set_usage (program_string: STRING; usage_string: STRING) 
		do
			c_pl_set_usage ( (create {C_STRING}.make (program_string)).item,  (create {C_STRING}.make (usage_string)).item)
		end

	c_plsetopt (opt: STRING; optarg: STRING): INTEGER 
		do
			Result := c_c_plsetopt ( (create {C_STRING}.make (opt)).item,  (create {C_STRING}.make (optarg)).item)
		end

	c_plparseopts (p_argc: POINTER; argv: STRING; mode: INTEGER): INTEGER 
		do
			Result := c_c_plparseopts (p_argc,  (create {C_STRING}.make (argv)).item, mode)
		end

	pl_opt_usage
		external
			"C inline use <plplot.h>"
		alias
			"[
				plOptUsage ();
			]"
		end

	plgfile (p_file: _IOBUF_STRUCT_API) 
		do
			c_plgfile (p_file.item)
		end

	plsfile (file: _IOBUF_STRUCT_API) 
		do
			c_plsfile (file.item)
		end

	plgesc (p_esc: STRING) 
		do
			c_plgesc ( (create {C_STRING}.make (p_esc)).item)
		end

	pl_cmd (op: INTEGER; ptr: POINTER) 
		do
			c_pl_cmd (op, ptr)
		end

	pl_find_name (p: STRING): INTEGER 
		do
			Result := c_pl_find_name ( (create {C_STRING}.make (p)).item)
		end

	pl_find_command (fn: STRING): POINTER 
		do
			Result := c_pl_find_command ( (create {C_STRING}.make (fn)).item)
		end

	pl_get_name (dir: STRING; subdir: STRING; filename: STRING; filespec: POINTER) 
		do
			c_pl_get_name ( (create {C_STRING}.make (dir)).item,  (create {C_STRING}.make (subdir)).item,  (create {C_STRING}.make (filename)).item, filespec)
		end

	pl_get_int (s: STRING): INTEGER 
		do
			Result := c_pl_get_int ( (create {C_STRING}.make (s)).item)
		end

	pl_get_flt (s: STRING): REAL_64 
		do
			Result := c_pl_get_flt ( (create {C_STRING}.make (s)).item)
		end

	pl_static2d_grid (ziliffe: POINTER; zstatic: POINTER; nx: INTEGER; ny: INTEGER) 
		do
			c_pl_static2d_grid (ziliffe, zstatic, nx, ny)
		end

	pl_alloc2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER) 
		do
			c_pl_alloc2d_grid (f, nx, ny)
		end

	pl_free2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER) 
		do
			c_pl_free2d_grid (f, nx, ny)
		end

	pl_min_max2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER; fmax: POINTER; fmin: POINTER) 
		do
			c_pl_min_max2d_grid (f, nx, ny, fmax, fmin)
		end

	pl_get_cursor (gin: PLGRAPHICSIN_STRUCT_API): INTEGER 
		do
			Result := c_pl_get_cursor (gin.item)
		end

	pl_translate_cursor (gin: PLGRAPHICSIN_STRUCT_API): INTEGER 
		do
			Result := c_pl_translate_cursor (gin.item)
		end

	plsdevdata (data: POINTER) 
		do
			c_plsdevdata (data)
		end

feature -- Externals

	c_c_plaxes (x0: REAL_64; y0: REAL_64; xopt: POINTER; xtick: REAL_64; nxsub: INTEGER; yopt: POINTER; ytick: REAL_64; nysub: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plaxes ((PLFLT)$x0, (PLFLT)$y0, (PLCHAR_VECTOR)$xopt, (PLFLT)$xtick, (PLINT)$nxsub, (PLCHAR_VECTOR)$yopt, (PLFLT)$ytick, (PLINT)$nysub);
			]"
		end

	c_c_plbin (nbin: INTEGER; x: POINTER; y: POINTER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plbin ((PLINT)$nbin, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLINT)$opt);
			]"
		end

	c_c_plbtime (year: POINTER; month: POINTER; day: POINTER; hour: POINTER; min: POINTER; sec: POINTER; ctime: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plbtime ((PLINT_NC_SCALAR)$year, (PLINT_NC_SCALAR)$month, (PLINT_NC_SCALAR)$day, (PLINT_NC_SCALAR)$hour, (PLINT_NC_SCALAR)$min, (PLFLT_NC_SCALAR)$sec, (PLFLT)$ctime);
			]"
		end

	c_c_plbox (xopt: POINTER; xtick: REAL_64; nxsub: INTEGER; yopt: POINTER; ytick: REAL_64; nysub: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plbox ((PLCHAR_VECTOR)$xopt, (PLFLT)$xtick, (PLINT)$nxsub, (PLCHAR_VECTOR)$yopt, (PLFLT)$ytick, (PLINT)$nysub);
			]"
		end

	c_c_plbox3 (xopt: POINTER; xlabel: POINTER; xtick: REAL_64; nxsub: INTEGER; yopt: POINTER; ylabel: POINTER; ytick: REAL_64; nysub: INTEGER; zopt: POINTER; zlabel: POINTER; ztick: REAL_64; nzsub: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plbox3 ((PLCHAR_VECTOR)$xopt, (PLCHAR_VECTOR)$xlabel, (PLFLT)$xtick, (PLINT)$nxsub, (PLCHAR_VECTOR)$yopt, (PLCHAR_VECTOR)$ylabel, (PLFLT)$ytick, (PLINT)$nysub, (PLCHAR_VECTOR)$zopt, (PLCHAR_VECTOR)$zlabel, (PLFLT)$ztick, (PLINT)$nzsub);
			]"
		end

	c_c_plcalc_world (rx: REAL_64; ry: REAL_64; wx: POINTER; wy: POINTER; window: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plcalc_world ((PLFLT)$rx, (PLFLT)$ry, (PLFLT_NC_SCALAR)$wx, (PLFLT_NC_SCALAR)$wy, (PLINT_NC_SCALAR)$window);
			]"
		end

	c_c_plcont (f: POINTER; nx: INTEGER; ny: INTEGER; kx: INTEGER; lx: INTEGER; ky: INTEGER; ly: INTEGER; clevel: POINTER; nlevel: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plcont ((PLFLT_MATRIX)$f, (PLINT)$nx, (PLINT)$ny, (PLINT)$kx, (PLINT)$lx, (PLINT)$ky, (PLINT)$ly, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plfcont (f2eval: POINTER; f2eval_data: POINTER; nx: INTEGER; ny: INTEGER; kx: INTEGER; lx: INTEGER; ky: INTEGER; ly: INTEGER; clevel: POINTER; nlevel: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfcont ((PLF2EVAL_callback)$f2eval, (PLPointer)$f2eval_data, (PLINT)$nx, (PLINT)$ny, (PLINT)$kx, (PLINT)$lx, (PLINT)$ky, (PLINT)$ly, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_c_plctime (year: INTEGER; month: INTEGER; day: INTEGER; hour: INTEGER; min: INTEGER; sec: REAL_64; ctime: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plctime ((PLINT)$year, (PLINT)$month, (PLINT)$day, (PLINT)$hour, (PLINT)$min, (PLFLT)$sec, (PLFLT_NC_SCALAR)$ctime);
			]"
		end

	c_pldid2pc (xmin: POINTER; ymin: POINTER; xmax: POINTER; ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pldid2pc ((PLFLT_NC_SCALAR)$xmin, (PLFLT_NC_SCALAR)$ymin, (PLFLT_NC_SCALAR)$xmax, (PLFLT_NC_SCALAR)$ymax);
			]"
		end

	c_pldip2dc (xmin: POINTER; ymin: POINTER; xmax: POINTER; ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pldip2dc ((PLFLT_NC_SCALAR)$xmin, (PLFLT_NC_SCALAR)$ymin, (PLFLT_NC_SCALAR)$xmax, (PLFLT_NC_SCALAR)$ymax);
			]"
		end

	c_c_plerrx (n: INTEGER; xmin: POINTER; xmax: POINTER; y: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plerrx ((PLINT)$n, (PLFLT_VECTOR)$xmin, (PLFLT_VECTOR)$xmax, (PLFLT_VECTOR)$y);
			]"
		end

	c_c_plerry (n: INTEGER; x: POINTER; ymin: POINTER; ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plerry ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$ymin, (PLFLT_VECTOR)$ymax);
			]"
		end

	c_c_plfill (n: INTEGER; x: POINTER; y: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plfill ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y);
			]"
		end

	c_c_plfill3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plfill3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z);
			]"
		end

	c_c_plgchr (p_def: POINTER; p_ht: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgchr ((PLFLT_NC_SCALAR)$p_def, (PLFLT_NC_SCALAR)$p_ht);
			]"
		end

	c_c_plgcmap1_range (min_color: POINTER; max_color: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgcmap1_range ((PLFLT_NC_SCALAR)$min_color, (PLFLT_NC_SCALAR)$max_color);
			]"
		end

	c_c_plgcol0 (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgcol0 ((PLINT)$icol0, (PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b);
			]"
		end

	c_c_plgcol0a (icol0: INTEGER; r: POINTER; g: POINTER; b: POINTER; alpha: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgcol0a ((PLINT)$icol0, (PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b, (PLFLT_NC_SCALAR)$alpha);
			]"
		end

	c_c_plgcolbg (r: POINTER; g: POINTER; b: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgcolbg ((PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b);
			]"
		end

	c_c_plgcolbga (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgcolbga ((PLINT_NC_SCALAR)$r, (PLINT_NC_SCALAR)$g, (PLINT_NC_SCALAR)$b, (PLFLT_NC_SCALAR)$alpha);
			]"
		end

	c_c_plgcompression (compression: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgcompression ((PLINT_NC_SCALAR)$compression);
			]"
		end

	c_c_plgdev (p_dev: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgdev ((PLCHAR_NC_VECTOR)$p_dev);
			]"
		end

	c_c_plgdidev (p_mar: POINTER; p_aspect: POINTER; p_jx: POINTER; p_jy: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgdidev ((PLFLT_NC_SCALAR)$p_mar, (PLFLT_NC_SCALAR)$p_aspect, (PLFLT_NC_SCALAR)$p_jx, (PLFLT_NC_SCALAR)$p_jy);
			]"
		end

	c_c_plgdiori (p_rot: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgdiori ((PLFLT_NC_SCALAR)$p_rot);
			]"
		end

	c_c_plgdiplt (p_xmin: POINTER; p_ymin: POINTER; p_xmax: POINTER; p_ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgdiplt ((PLFLT_NC_SCALAR)$p_xmin, (PLFLT_NC_SCALAR)$p_ymin, (PLFLT_NC_SCALAR)$p_xmax, (PLFLT_NC_SCALAR)$p_ymax);
			]"
		end

	c_c_plgfci (p_fci: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgfci ((PLUNICODE_NC_SCALAR)$p_fci);
			]"
		end

	c_c_plgfam (p_fam: POINTER; p_num: POINTER; p_bmax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgfam ((PLINT_NC_SCALAR)$p_fam, (PLINT_NC_SCALAR)$p_num, (PLINT_NC_SCALAR)$p_bmax);
			]"
		end

	c_c_plgfnam (fnam: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgfnam ((PLCHAR_NC_VECTOR)$fnam);
			]"
		end

	c_c_plgfont (p_family: POINTER; p_style: POINTER; p_weight: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgfont ((PLINT_NC_SCALAR)$p_family, (PLINT_NC_SCALAR)$p_style, (PLINT_NC_SCALAR)$p_weight);
			]"
		end

	c_c_plglevel (p_level: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plglevel ((PLINT_NC_SCALAR)$p_level);
			]"
		end

	c_c_plgpage (p_xp: POINTER; p_yp: POINTER; p_xleng: POINTER; p_yleng: POINTER; p_xoff: POINTER; p_yoff: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgpage ((PLFLT_NC_SCALAR)$p_xp, (PLFLT_NC_SCALAR)$p_yp, (PLINT_NC_SCALAR)$p_xleng, (PLINT_NC_SCALAR)$p_yleng, (PLINT_NC_SCALAR)$p_xoff, (PLINT_NC_SCALAR)$p_yoff);
			]"
		end

	c_c_plgradient (n: INTEGER; x: POINTER; y: POINTER; angle: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgradient ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT)$angle);
			]"
		end

	c_c_plgriddata (x: POINTER; y: POINTER; z: POINTER; npts: INTEGER; xg: POINTER; nptsx: INTEGER; yg: POINTER; nptsy: INTEGER; zg: POINTER; type: INTEGER; data: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgriddata ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLINT)$npts, (PLFLT_VECTOR)$xg, (PLINT)$nptsx, (PLFLT_VECTOR)$yg, (PLINT)$nptsy, (PLFLT_NC_MATRIX)$zg, (PLINT)$type, (PLFLT)$data);
			]"
		end

	c_plfgriddata (x: POINTER; y: POINTER; z: POINTER; npts: INTEGER; xg: POINTER; nptsx: INTEGER; yg: POINTER; nptsy: INTEGER; zops: POINTER; zgp: POINTER; type: INTEGER; data: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfgriddata ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLINT)$npts, (PLFLT_VECTOR)$xg, (PLINT)$nptsx, (PLFLT_VECTOR)$yg, (PLINT)$nptsy, (PLF2OPS)$zops, (PLPointer)$zgp, (PLINT)$type, (PLFLT)$data);
			]"
		end

	c_c_plgspa (xmin: POINTER; xmax: POINTER; ymin: POINTER; ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgspa ((PLFLT_NC_SCALAR)$xmin, (PLFLT_NC_SCALAR)$xmax, (PLFLT_NC_SCALAR)$ymin, (PLFLT_NC_SCALAR)$ymax);
			]"
		end

	c_c_plgstrm (p_strm: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgstrm ((PLINT_NC_SCALAR)$p_strm);
			]"
		end

	c_c_plgver (p_ver: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgver ((PLCHAR_NC_VECTOR)$p_ver);
			]"
		end

	c_c_plgvpd (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgvpd ((PLFLT_NC_SCALAR)$p_xmin, (PLFLT_NC_SCALAR)$p_xmax, (PLFLT_NC_SCALAR)$p_ymin, (PLFLT_NC_SCALAR)$p_ymax);
			]"
		end

	c_c_plgvpw (p_xmin: POINTER; p_xmax: POINTER; p_ymin: POINTER; p_ymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgvpw ((PLFLT_NC_SCALAR)$p_xmin, (PLFLT_NC_SCALAR)$p_xmax, (PLFLT_NC_SCALAR)$p_ymin, (PLFLT_NC_SCALAR)$p_ymax);
			]"
		end

	c_c_plgxax (p_digmax: POINTER; p_digits: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgxax ((PLINT_NC_SCALAR)$p_digmax, (PLINT_NC_SCALAR)$p_digits);
			]"
		end

	c_c_plgyax (p_digmax: POINTER; p_digits: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgyax ((PLINT_NC_SCALAR)$p_digmax, (PLINT_NC_SCALAR)$p_digits);
			]"
		end

	c_c_plgzax (p_digmax: POINTER; p_digits: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plgzax ((PLINT_NC_SCALAR)$p_digmax, (PLINT_NC_SCALAR)$p_digits);
			]"
		end

	c_c_plhist (n: INTEGER; data: POINTER; datmin: REAL_64; datmax: REAL_64; nbin: INTEGER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plhist ((PLINT)$n, (PLFLT_VECTOR)$data, (PLFLT)$datmin, (PLFLT)$datmax, (PLINT)$nbin, (PLINT)$opt);
			]"
		end

	c_c_plhlsrgb (h: REAL_64; l: REAL_64; s: REAL_64; p_r: POINTER; p_g: POINTER; p_b: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plhlsrgb ((PLFLT)$h, (PLFLT)$l, (PLFLT)$s, (PLFLT_NC_SCALAR)$p_r, (PLFLT_NC_SCALAR)$p_g, (PLFLT_NC_SCALAR)$p_b);
			]"
		end

	c_c_pllab (xlabel: POINTER; ylabel: POINTER; tlabel: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pllab ((PLCHAR_VECTOR)$xlabel, (PLCHAR_VECTOR)$ylabel, (PLCHAR_VECTOR)$tlabel);
			]"
		end

	c_c_pllegend (p_legend_width: POINTER; p_legend_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; plot_width: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; nrow: INTEGER; ncolumn: INTEGER; nlegend: INTEGER; opt_array: POINTER; text_offset: REAL_64; text_scale: REAL_64; text_spacing: REAL_64; text_justification: REAL_64; text_colors: POINTER; text: POINTER; box_colors: POINTER; box_patterns: POINTER; box_scales: POINTER; box_line_widths: POINTER; line_colors: POINTER; line_styles: POINTER; line_widths: POINTER; symbol_colors: POINTER; symbol_scales: POINTER; symbol_numbers: POINTER; symbols: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pllegend ((PLFLT_NC_SCALAR)$p_legend_width, (PLFLT_NC_SCALAR)$p_legend_height, (PLINT)$opt, (PLINT)$position, (PLFLT)$x, (PLFLT)$y, (PLFLT)$plot_width, (PLINT)$bg_color, (PLINT)$bb_color, (PLINT)$bb_style, (PLINT)$nrow, (PLINT)$ncolumn, (PLINT)$nlegend, (PLINT_VECTOR)$opt_array, (PLFLT)$text_offset, (PLFLT)$text_scale, (PLFLT)$text_spacing, (PLFLT)$text_justification, (PLINT_VECTOR)$text_colors, (PLCHAR_MATRIX)$text, (PLINT_VECTOR)$box_colors, (PLINT_VECTOR)$box_patterns, (PLFLT_VECTOR)$box_scales, (PLFLT_VECTOR)$box_line_widths, (PLINT_VECTOR)$line_colors, (PLINT_VECTOR)$line_styles, (PLFLT_VECTOR)$line_widths, (PLINT_VECTOR)$symbol_colors, (PLFLT_VECTOR)$symbol_scales, (PLINT_VECTOR)$symbol_numbers, (PLCHAR_MATRIX)$symbols);
			]"
		end

	c_c_plcolorbar (p_colorbar_width: POINTER; p_colorbar_height: POINTER; opt: INTEGER; position: INTEGER; x: REAL_64; y: REAL_64; x_length: REAL_64; y_length: REAL_64; bg_color: INTEGER; bb_color: INTEGER; bb_style: INTEGER; low_cap_color: REAL_64; high_cap_color: REAL_64; cont_color: INTEGER; cont_width: REAL_64; n_labels: INTEGER; label_opts: POINTER; labels: POINTER; n_axes: INTEGER; axis_opts: POINTER; ticks: POINTER; sub_ticks: POINTER; n_values: POINTER; values: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plcolorbar ((PLFLT_NC_SCALAR)$p_colorbar_width, (PLFLT_NC_SCALAR)$p_colorbar_height, (PLINT)$opt, (PLINT)$position, (PLFLT)$x, (PLFLT)$y, (PLFLT)$x_length, (PLFLT)$y_length, (PLINT)$bg_color, (PLINT)$bb_color, (PLINT)$bb_style, (PLFLT)$low_cap_color, (PLFLT)$high_cap_color, (PLINT)$cont_color, (PLFLT)$cont_width, (PLINT)$n_labels, (PLINT_VECTOR)$label_opts, (PLCHAR_MATRIX)$labels, (PLINT)$n_axes, (PLCHAR_MATRIX)$axis_opts, (PLFLT_VECTOR)$ticks, (PLINT_VECTOR)$sub_ticks, (PLINT_VECTOR)$n_values, (PLFLT_MATRIX)$values);
			]"
		end

	c_c_plline (n: INTEGER; x: POINTER; y: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plline ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y);
			]"
		end

	c_c_plline3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plline3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z);
			]"
		end

	c_c_plmap (mapform: POINTER; name: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmap ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy);
			]"
		end

	c_c_plmapline (mapform: POINTER; name: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmapline ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT_VECTOR)$plotentries, (PLINT)$nplotentries);
			]"
		end

	c_c_plmapstring (mapform: POINTER; name: POINTER; string: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmapstring ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLCHAR_VECTOR)$string, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT_VECTOR)$plotentries, (PLINT)$nplotentries);
			]"
		end

	c_c_plmaptex (mapform: POINTER; name: POINTER; dx: REAL_64; dy: REAL_64; just: REAL_64; text: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentry: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmaptex ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$dx, (PLFLT)$dy, (PLFLT)$just, (PLCHAR_VECTOR)$text, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT)$plotentry);
			]"
		end

	c_c_plmapfill (mapform: POINTER; name: POINTER; minx: REAL_64; maxx: REAL_64; miny: REAL_64; maxy: REAL_64; plotentries: POINTER; nplotentries: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmapfill ((PLMAPFORM_callback)$mapform, (PLCHAR_VECTOR)$name, (PLFLT)$minx, (PLFLT)$maxx, (PLFLT)$miny, (PLFLT)$maxy, (PLINT_VECTOR)$plotentries, (PLINT)$nplotentries);
			]"
		end

	c_c_plmeridians (mapform: POINTER; dlong: REAL_64; dlat: REAL_64; minlong: REAL_64; maxlong: REAL_64; minlat: REAL_64; maxlat: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmeridians ((PLMAPFORM_callback)$mapform, (PLFLT)$dlong, (PLFLT)$dlat, (PLFLT)$minlong, (PLFLT)$maxlong, (PLFLT)$minlat, (PLFLT)$maxlat);
			]"
		end

	c_c_plmesh (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmesh ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt);
			]"
		end

	c_plfmesh (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfmesh ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt);
			]"
		end

	c_c_plmeshc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmeshc ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_plfmeshc (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfmeshc ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_c_plmkstrm (p_strm: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmkstrm ((PLINT_NC_SCALAR)$p_strm);
			]"
		end

	c_c_plmtex (side: POINTER; disp: REAL_64; pos: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmtex ((PLCHAR_VECTOR)$side, (PLFLT)$disp, (PLFLT)$pos, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_c_plmtex3 (side: POINTER; disp: REAL_64; pos: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plmtex3 ((PLCHAR_VECTOR)$side, (PLFLT)$disp, (PLFLT)$pos, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_c_plot3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; side: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plot3d ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLBOOL)$side);
			]"
		end

	c_plfplot3d (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; side: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfplot3d ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLBOOL)$side);
			]"
		end

	c_c_plot3dc (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plot3dc ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_plfplot3dc (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfplot3dc ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_c_plot3dcl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plot3dcl ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLINT)$indexxmin, (PLINT)$indexxmax, (PLINT_VECTOR)$indexymin, (PLINT_VECTOR)$indexymax);
			]"
		end

	c_plfplot3dcl (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfplot3dcl ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLINT)$indexxmin, (PLINT)$indexxmax, (PLINT_VECTOR)$indexymin, (PLINT_VECTOR)$indexymax);
			]"
		end

	c_c_plpat (nlin: INTEGER; inc: POINTER; del: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plpat ((PLINT)$nlin, (PLINT_VECTOR)$inc, (PLINT_VECTOR)$del);
			]"
		end

	c_c_plpoin (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plpoin ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLINT)$code);
			]"
		end

	c_c_plpoin3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plpoin3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLINT)$code);
			]"
		end

	c_c_plpoly3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; draw: POINTER; ifcc: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plpoly3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLBOOL_VECTOR)$draw, (PLBOOL)$ifcc);
			]"
		end

	c_c_plptex (x: REAL_64; y: REAL_64; dx: REAL_64; dy: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plptex ((PLFLT)$x, (PLFLT)$y, (PLFLT)$dx, (PLFLT)$dy, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_c_plptex3 (wx: REAL_64; wy: REAL_64; wz: REAL_64; dx: REAL_64; dy: REAL_64; dz: REAL_64; sx: REAL_64; sy: REAL_64; sz: REAL_64; just: REAL_64; text: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plptex3 ((PLFLT)$wx, (PLFLT)$wy, (PLFLT)$wz, (PLFLT)$dx, (PLFLT)$dy, (PLFLT)$dz, (PLFLT)$sx, (PLFLT)$sy, (PLFLT)$sz, (PLFLT)$just, (PLCHAR_VECTOR)$text);
			]"
		end

	c_c_plrgbhls (r: REAL_64; g: REAL_64; b: REAL_64; p_h: POINTER; p_l: POINTER; p_s: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plrgbhls ((PLFLT)$r, (PLFLT)$g, (PLFLT)$b, (PLFLT_NC_SCALAR)$p_h, (PLFLT_NC_SCALAR)$p_l, (PLFLT_NC_SCALAR)$p_s);
			]"
		end

	c_c_plscmap0 (r: POINTER; g: POINTER; b: POINTER; ncol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap0 ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLINT)$ncol0);
			]"
		end

	c_c_plscmap0a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol0: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap0a ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLFLT_VECTOR)$alpha, (PLINT)$ncol0);
			]"
		end

	c_c_plscmap1 (r: POINTER; g: POINTER; b: POINTER; ncol1: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap1 ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLINT)$ncol1);
			]"
		end

	c_c_plscmap1a (r: POINTER; g: POINTER; b: POINTER; alpha: POINTER; ncol1: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap1a ((PLINT_VECTOR)$r, (PLINT_VECTOR)$g, (PLINT_VECTOR)$b, (PLFLT_VECTOR)$alpha, (PLINT)$ncol1);
			]"
		end

	c_c_plscmap1l (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alt_hue_path: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap1l ((PLBOOL)$itype, (PLINT)$npts, (PLFLT_VECTOR)$intensity, (PLFLT_VECTOR)$coord1, (PLFLT_VECTOR)$coord2, (PLFLT_VECTOR)$coord3, (PLBOOL_VECTOR)$alt_hue_path);
			]"
		end

	c_c_plscmap1la (itype: INTEGER; npts: INTEGER; intensity: POINTER; coord1: POINTER; coord2: POINTER; coord3: POINTER; alpha: POINTER; alt_hue_path: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plscmap1la ((PLBOOL)$itype, (PLINT)$npts, (PLFLT_VECTOR)$intensity, (PLFLT_VECTOR)$coord1, (PLFLT_VECTOR)$coord2, (PLFLT_VECTOR)$coord3, (PLFLT_VECTOR)$alpha, (PLBOOL_VECTOR)$alt_hue_path);
			]"
		end

	c_c_plsdev (devname: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsdev ((PLCHAR_VECTOR)$devname);
			]"
		end

	c_c_plsesc (esc: CHARACTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsesc ((char)$esc);
			]"
		end

	c_c_plsfnam (fnam: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsfnam ((PLCHAR_VECTOR)$fnam);
			]"
		end

	c_c_plshade (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plshade ((PLFLT_MATRIX)$a, (PLINT)$nx, (PLINT)$ny, (PLDEFINED_callback)$defined, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$shade_min, (PLFLT)$shade_max, (PLINT)$sh_cmap, (PLFLT)$sh_color, (PLFLT)$sh_width, (PLINT)$min_color, (PLFLT)$min_width, (PLINT)$max_color, (PLFLT)$max_width, (PLFILL_callback)$fill, (PLBOOL)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_c_plshades (a: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; clevel: POINTER; nlevel: INTEGER; fill_width: REAL_64; cont_color: INTEGER; cont_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plshades ((PLFLT_MATRIX)$a, (PLINT)$nx, (PLINT)$ny, (PLDEFINED_callback)$defined, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLFLT)$fill_width, (PLINT)$cont_color, (PLFLT)$cont_width, (PLFILL_callback)$fill, (PLBOOL)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plfshades (zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; clevel: POINTER; nlevel: INTEGER; fill_width: REAL_64; cont_color: INTEGER; cont_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfshades ((PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLDEFINED_callback)$defined, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLFLT)$fill_width, (PLINT)$cont_color, (PLFLT)$cont_width, (PLFILL_callback)$fill, (PLINT)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plfshade (f2eval: POINTER; f2eval_data: POINTER; c2eval: POINTER; c2eval_data: POINTER; nx: INTEGER; ny: INTEGER; left: REAL_64; right: REAL_64; bottom: REAL_64; top: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfshade ((PLF2EVAL_callback)$f2eval, (PLPointer)$f2eval_data, (PLF2EVAL_callback)$c2eval, (PLPointer)$c2eval_data, (PLINT)$nx, (PLINT)$ny, (PLFLT)$left, (PLFLT)$right, (PLFLT)$bottom, (PLFLT)$top, (PLFLT)$shade_min, (PLFLT)$shade_max, (PLINT)$sh_cmap, (PLFLT)$sh_color, (PLFLT)$sh_width, (PLINT)$min_color, (PLFLT)$min_width, (PLINT)$max_color, (PLFLT)$max_width, (PLFILL_callback)$fill, (PLBOOL)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plfshade1 (zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; defined: POINTER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; shade_min: REAL_64; shade_max: REAL_64; sh_cmap: INTEGER; sh_color: REAL_64; sh_width: REAL_64; min_color: INTEGER; min_width: REAL_64; max_color: INTEGER; max_width: REAL_64; fill: POINTER; rectangular: INTEGER; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfshade1 ((PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLDEFINED_callback)$defined, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$shade_min, (PLFLT)$shade_max, (PLINT)$sh_cmap, (PLFLT)$sh_color, (PLFLT)$sh_width, (PLINT)$min_color, (PLFLT)$min_width, (PLINT)$max_color, (PLFLT)$max_width, (PLFILL_callback)$fill, (PLINT)$rectangular, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_c_plslabelfunc (label_func: POINTER; label_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plslabelfunc ((PLLABEL_FUNC_callback)$label_func, (PLPointer)$label_data);
			]"
		end

	c_c_plsmem (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsmem ((PLINT)$maxx, (PLINT)$maxy, (PLPointer)$plotmem);
			]"
		end

	c_c_plsmema (maxx: INTEGER; maxy: INTEGER; plotmem: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsmema ((PLINT)$maxx, (PLINT)$maxy, (PLPointer)$plotmem);
			]"
		end

	c_c_plspal0 (filename: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plspal0 ((PLCHAR_VECTOR)$filename);
			]"
		end

	c_c_plspal1 (filename: POINTER; interpolate: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plspal1 ((PLCHAR_VECTOR)$filename, (PLBOOL)$interpolate);
			]"
		end

	c_c_plstart (devname: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstart ((PLCHAR_VECTOR)$devname, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_c_plstransform (coordinate_transform: POINTER; coordinate_transform_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstransform ((PLTRANSFORM_callback)$coordinate_transform, (PLPointer)$coordinate_transform_data);
			]"
		end

	c_c_plstring (n: INTEGER; x: POINTER; y: POINTER; string: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstring ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLCHAR_VECTOR)$string);
			]"
		end

	c_c_plstring3 (n: INTEGER; x: POINTER; y: POINTER; z: POINTER; string: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstring3 ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_VECTOR)$z, (PLCHAR_VECTOR)$string);
			]"
		end

	c_c_plstripc (id: POINTER; xspec: POINTER; yspec: POINTER; xmin: REAL_64; xmax: REAL_64; xjump: REAL_64; ymin: REAL_64; ymax: REAL_64; xlpos: REAL_64; ylpos: REAL_64; y_ascl: INTEGER; acc: INTEGER; colbox: INTEGER; collab: INTEGER; colline: POINTER; styline: POINTER; legline: POINTER; labx: POINTER; laby: POINTER; labtop: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstripc ((PLINT_NC_SCALAR)$id, (PLCHAR_VECTOR)$xspec, (PLCHAR_VECTOR)$yspec, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$xjump, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$xlpos, (PLFLT)$ylpos, (PLBOOL)$y_ascl, (PLBOOL)$acc, (PLINT)$colbox, (PLINT)$collab, (PLINT_VECTOR)$colline, (PLINT_VECTOR)$styline, (PLCHAR_MATRIX)$legline, (PLCHAR_VECTOR)$labx, (PLCHAR_VECTOR)$laby, (PLCHAR_VECTOR)$labtop);
			]"
		end

	c_c_plimagefr (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; valuemin: REAL_64; valuemax: REAL_64; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plimagefr ((PLFLT_MATRIX)$idata, (PLINT)$nx, (PLINT)$ny, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$valuemin, (PLFLT)$valuemax, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plfimagefr (idataops: POINTER; idatap: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; valuemin: REAL_64; valuemax: REAL_64; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfimagefr ((PLF2OPS)$idataops, (PLPointer)$idatap, (PLINT)$nx, (PLINT)$ny, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$valuemin, (PLFLT)$valuemax, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_c_plimage (idata: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; dxmin: REAL_64; dxmax: REAL_64; dymin: REAL_64; dymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plimage ((PLFLT_MATRIX)$idata, (PLINT)$nx, (PLINT)$ny, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$dxmin, (PLFLT)$dxmax, (PLFLT)$dymin, (PLFLT)$dymax);
			]"
		end

	c_plfimage (idataops: POINTER; idatap: POINTER; nx: INTEGER; ny: INTEGER; xmin: REAL_64; xmax: REAL_64; ymin: REAL_64; ymax: REAL_64; zmin: REAL_64; zmax: REAL_64; dxmin: REAL_64; dxmax: REAL_64; dymin: REAL_64; dymax: REAL_64)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfimage ((PLF2OPS)$idataops, (PLPointer)$idatap, (PLINT)$nx, (PLINT)$ny, (PLFLT)$xmin, (PLFLT)$xmax, (PLFLT)$ymin, (PLFLT)$ymax, (PLFLT)$zmin, (PLFLT)$zmax, (PLFLT)$dxmin, (PLFLT)$dxmax, (PLFLT)$dymin, (PLFLT)$dymax);
			]"
		end

	c_c_plstyl (nms: INTEGER; mark: POINTER; space: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plstyl ((PLINT)$nms, (PLINT_VECTOR)$mark, (PLINT_VECTOR)$space);
			]"
		end

	c_c_plsurf3d (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsurf3d ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_plfsurf3d (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfsurf3d ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel);
			]"
		end

	c_c_plsurf3dl (x: POINTER; y: POINTER; z: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsurf3dl ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLFLT_MATRIX)$z, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLINT)$indexxmin, (PLINT)$indexxmax, (PLINT_VECTOR)$indexymin, (PLINT_VECTOR)$indexymax);
			]"
		end

	c_plfsurf3dl (x: POINTER; y: POINTER; zops: POINTER; zp: POINTER; nx: INTEGER; ny: INTEGER; opt: INTEGER; clevel: POINTER; nlevel: INTEGER; indexxmin: INTEGER; indexxmax: INTEGER; indexymin: POINTER; indexymax: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfsurf3dl ((PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLF2OPS)$zops, (PLPointer)$zp, (PLINT)$nx, (PLINT)$ny, (PLINT)$opt, (PLFLT_VECTOR)$clevel, (PLINT)$nlevel, (PLINT)$indexxmin, (PLINT)$indexxmax, (PLINT_VECTOR)$indexymin, (PLINT_VECTOR)$indexymax);
			]"
		end

	c_c_plsvect (arrowx: POINTER; arrowy: POINTER; npts: INTEGER; fill: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsvect ((PLFLT_VECTOR)$arrowx, (PLFLT_VECTOR)$arrowy, (PLINT)$npts, (PLBOOL)$fill);
			]"
		end

	c_c_plsym (n: INTEGER; x: POINTER; y: POINTER; code: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plsym ((PLINT)$n, (PLFLT_VECTOR)$x, (PLFLT_VECTOR)$y, (PLINT)$code);
			]"
		end

	c_c_pltimefmt (fmt: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_pltimefmt ((PLCHAR_VECTOR)$fmt);
			]"
		end

	c_c_plvect (u: POINTER; v: POINTER; nx: INTEGER; ny: INTEGER; scale: REAL_64; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plvect ((PLFLT_MATRIX)$u, (PLFLT_MATRIX)$v, (PLINT)$nx, (PLINT)$ny, (PLFLT)$scale, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_plfvect (getuv: POINTER; up: POINTER; vp: POINTER; nx: INTEGER; ny: INTEGER; scale: REAL_64; pltr: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plfvect ((PLF2EVAL_callback)$getuv, (PLPointer)$up, (PLPointer)$vp, (PLINT)$nx, (PLINT)$ny, (PLFLT)$scale, (PLTRANSFORM_callback)$pltr, (PLPointer)$pltr_data);
			]"
		end

	c_c_plxormod (mode: INTEGER; status: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				c_plxormod ((PLBOOL)$mode, (PLBOOL_NC_SCALAR)$status);
			]"
		end

	c_plg_file_devs (p_menustr: POINTER; p_devname: POINTER; p_ndev: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgFileDevs ((PLCHAR_VECTOR**)$p_menustr, (PLCHAR_VECTOR**)$p_devname, (int*)$p_ndev);
			]"
		end

	c_plg_devs (p_menustr: POINTER; p_devname: POINTER; p_ndev: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgDevs ((PLCHAR_VECTOR**)$p_menustr, (PLCHAR_VECTOR**)$p_devname, (int*)$p_ndev);
			]"
		end

	c_pls_key_eh (keyeh: POINTER; keyeh_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsKeyEH ((void (*) (PLGraphicsIn *anonymous_1, PLPointer anonymous_2, int *anonymous_3))$keyeh, (PLPointer)$keyeh_data);
			]"
		end

	c_pls_button_eh (buttoneh: POINTER; buttoneh_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsButtonEH ((void (*) (PLGraphicsIn *anonymous_1, PLPointer anonymous_2, int *anonymous_3))$buttoneh, (PLPointer)$buttoneh_data);
			]"
		end

	c_plsbop_h (handler: POINTER; handler_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsbopH ((void (*) (PLPointer anonymous_1, int *anonymous_2))$handler, (PLPointer)$handler_data);
			]"
		end

	c_plseop_h (handler: POINTER; handler_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plseopH ((void (*) (PLPointer anonymous_1, int *anonymous_2))$handler, (PLPointer)$handler_data);
			]"
		end

	c_pls_error (errcode: POINTER; errmsg: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsError ((PLINT_NC_SCALAR)$errcode, (PLCHAR_NC_VECTOR)$errmsg);
			]"
		end

	c_plsexit (handler: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsexit ((int (*) (PLCHAR_VECTOR anonymous_1))$handler);
			]"
		end

	c_plsabort (handler: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsabort ((void (*) (PLCHAR_VECTOR anonymous_1))$handler);
			]"
		end

	c_pltr0 (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltr0 ((PLFLT)$x, (PLFLT)$y, (PLFLT_NC_SCALAR)$tx, (PLFLT_NC_SCALAR)$ty, (PLPointer)$pltr_data);
			]"
		end

	c_pltr1 (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltr1 ((PLFLT)$x, (PLFLT)$y, (PLFLT_NC_SCALAR)$tx, (PLFLT_NC_SCALAR)$ty, (PLPointer)$pltr_data);
			]"
		end

	c_pltr2 (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltr2 ((PLFLT)$x, (PLFLT)$y, (PLFLT_NC_SCALAR)$tx, (PLFLT_NC_SCALAR)$ty, (PLPointer)$pltr_data);
			]"
		end

	c_pltr2p (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltr2p ((PLFLT)$x, (PLFLT)$y, (PLFLT_NC_SCALAR)$tx, (PLFLT_NC_SCALAR)$ty, (PLPointer)$pltr_data);
			]"
		end

	c_pltr2f (x: REAL_64; y: REAL_64; tx: POINTER; ty: POINTER; pltr_data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pltr2f ((PLFLT)$x, (PLFLT)$y, (PLFLT_NC_SCALAR)$tx, (PLFLT_NC_SCALAR)$ty, (PLPointer)$pltr_data);
			]"
		end

	c_plf2ops_c: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2ops_c ();
			]"
		end

	c_plf2ops_grid_c: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2ops_grid_c ();
			]"
		end

	c_plf2ops_grid_row_major: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2ops_grid_row_major ();
			]"
		end

	c_plf2ops_grid_col_major: POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2ops_grid_col_major ();
			]"
		end

	c_plf2eval1 (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2eval1 ((PLINT)$ix, (PLINT)$iy, (PLPointer)$plf2eval_data);
			]"
		end

	c_plf2eval2 (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2eval2 ((PLINT)$ix, (PLINT)$iy, (PLPointer)$plf2eval_data);
			]"
		end

	c_plf2eval (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2eval ((PLINT)$ix, (PLINT)$iy, (PLPointer)$plf2eval_data);
			]"
		end

	c_plf2evalr (ix: INTEGER; iy: INTEGER; plf2eval_data: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plf2evalr ((PLINT)$ix, (PLINT)$iy, (PLPointer)$plf2eval_data);
			]"
		end

	c_pl_merge_opts (options: POINTER; name: POINTER; notes: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plMergeOpts ((PLOptionTable*)$options, (PLCHAR_VECTOR)$name, (PLCHAR_VECTOR*)$notes);
			]"
		end

	c_pl_set_usage (program_string: POINTER; usage_string: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plSetUsage ((PLCHAR_VECTOR)$program_string, (PLCHAR_VECTOR)$usage_string);
			]"
		end

	c_c_plsetopt (opt: POINTER; optarg: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return c_plsetopt ((PLCHAR_VECTOR)$opt, (PLCHAR_VECTOR)$optarg);
			]"
		end

	c_c_plparseopts (p_argc: POINTER; argv: POINTER; mode: INTEGER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return c_plparseopts ((int*)$p_argc, (PLCHAR_NC_MATRIX)$argv, (PLINT)$mode);
			]"
		end

	c_plgfile (p_file: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgfile ((FILE**)$p_file);
			]"
		end

	c_plsfile (file: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsfile ((FILE*)$file);
			]"
		end

	c_plgesc (p_esc: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plgesc ((PLCHAR_NC_SCALAR)$p_esc);
			]"
		end

	c_pl_cmd (op: INTEGER; ptr: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				pl_cmd ((PLINT)$op, (PLPointer)$ptr);
			]"
		end

	c_pl_find_name (p: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plFindName ((PLCHAR_NC_VECTOR)$p);
			]"
		end

	c_pl_find_command (fn: POINTER): POINTER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plFindCommand ((PLCHAR_VECTOR)$fn);
			]"
		end

	c_pl_get_name (dir: POINTER; subdir: POINTER; filename: POINTER; filespec: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plGetName ((PLCHAR_VECTOR)$dir, (PLCHAR_VECTOR)$subdir, (PLCHAR_VECTOR)$filename, (PLCHAR_NC_VECTOR*)$filespec);
			]"
		end

	c_pl_get_int (s: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plGetInt ((PLCHAR_VECTOR)$s);
			]"
		end

	c_pl_get_flt (s: POINTER): REAL_64
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plGetFlt ((PLCHAR_VECTOR)$s);
			]"
		end

	c_pl_static2d_grid (ziliffe: POINTER; zstatic: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plStatic2dGrid ((PLFLT_NC_MATRIX)$ziliffe, (PLFLT_VECTOR)$zstatic, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_pl_alloc2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plAlloc2dGrid ((PLFLT_NC_MATRIX*)$f, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_pl_free2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plFree2dGrid ((PLFLT_NC_MATRIX)$f, (PLINT)$nx, (PLINT)$ny);
			]"
		end

	c_pl_min_max2d_grid (f: POINTER; nx: INTEGER; ny: INTEGER; fmax: POINTER; fmin: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plMinMax2dGrid ((PLFLT_MATRIX)$f, (PLINT)$nx, (PLINT)$ny, (PLFLT_NC_SCALAR)$fmax, (PLFLT_NC_SCALAR)$fmin);
			]"
		end

	c_pl_get_cursor (gin: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plGetCursor ((PLGraphicsIn*)$gin);
			]"
		end

	c_pl_translate_cursor (gin: POINTER): INTEGER
		external
			"C inline use <plplot.h>"
		alias
			"[
				return plTranslateCursor ((PLGraphicsIn*)$gin);
			]"
		end

	c_plsdevdata (data: POINTER)
		external
			"C inline use <plplot.h>"
		alias
			"[
				plsdevdata ((PLPointer)$data);
			]"
		end

feature -- Externals Address

end
