note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PLF2OPS_T_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	get: POINTER
			-- Access member `get`
		require
			exists: exists
		do
			Result := c_get (item)
		ensure
			result_correct: Result = c_get (item)
		end

	set_get (a_value: POINTER) 
			-- Change the value of member `get` to `a_value`.
		require
			exists: exists
		do
			set_c_get (item, a_value)
		ensure
			get_set: a_value = get
		end

	set: POINTER
			-- Access member `set`
		require
			exists: exists
		do
			Result := c_set (item)
		ensure
			result_correct: Result = c_set (item)
		end

	set_set (a_value: POINTER) 
			-- Change the value of member `set` to `a_value`.
		require
			exists: exists
		do
			set_c_set (item, a_value)
		ensure
			set_set: a_value = set
		end

	add: POINTER
			-- Access member `add`
		require
			exists: exists
		do
			Result := c_add (item)
		ensure
			result_correct: Result = c_add (item)
		end

	set_add (a_value: POINTER) 
			-- Change the value of member `add` to `a_value`.
		require
			exists: exists
		do
			set_c_add (item, a_value)
		ensure
			add_set: a_value = add
		end

	sub: POINTER
			-- Access member `sub`
		require
			exists: exists
		do
			Result := c_sub (item)
		ensure
			result_correct: Result = c_sub (item)
		end

	set_sub (a_value: POINTER) 
			-- Change the value of member `sub` to `a_value`.
		require
			exists: exists
		do
			set_c_sub (item, a_value)
		ensure
			sub_set: a_value = sub
		end

	mul: POINTER
			-- Access member `mul`
		require
			exists: exists
		do
			Result := c_mul (item)
		ensure
			result_correct: Result = c_mul (item)
		end

	set_mul (a_value: POINTER) 
			-- Change the value of member `mul` to `a_value`.
		require
			exists: exists
		do
			set_c_mul (item, a_value)
		ensure
			mul_set: a_value = mul
		end

	div: POINTER
			-- Access member `div`
		require
			exists: exists
		do
			Result := c_div (item)
		ensure
			result_correct: Result = c_div (item)
		end

	set_div (a_value: POINTER) 
			-- Change the value of member `div` to `a_value`.
		require
			exists: exists
		do
			set_c_div (item, a_value)
		ensure
			div_set: a_value = div
		end

	is_nan: POINTER
			-- Access member `is_nan`
		require
			exists: exists
		do
			Result := c_is_nan (item)
		ensure
			result_correct: Result = c_is_nan (item)
		end

	set_is_nan (a_value: POINTER) 
			-- Change the value of member `is_nan` to `a_value`.
		require
			exists: exists
		do
			set_c_is_nan (item, a_value)
		ensure
			is_nan_set: a_value = is_nan
		end

	minmax: POINTER
			-- Access member `minmax`
		require
			exists: exists
		do
			Result := c_minmax (item)
		ensure
			result_correct: Result = c_minmax (item)
		end

	set_minmax (a_value: POINTER) 
			-- Change the value of member `minmax` to `a_value`.
		require
			exists: exists
		do
			set_c_minmax (item, a_value)
		ensure
			minmax_set: a_value = minmax
		end

	f2eval: POINTER
			-- Access member `f2eval`
		require
			exists: exists
		do
			Result := c_f2eval (item)
		ensure
			result_correct: Result = c_f2eval (item)
		end

	set_f2eval (a_value: POINTER) 
			-- Change the value of member `f2eval` to `a_value`.
		require
			exists: exists
		do
			set_c_f2eval (item, a_value)
		ensure
			f2eval_set: a_value = f2eval
		end

feature {NONE} -- Implementation wrapper for struct plf2ops_t

	sizeof_external: INTEGER 
		external
			"C inline use <plplot.h>"
		alias
			"sizeof(plf2ops_t)"
		end

	c_get (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->get
			]"
		end

	set_c_get (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->get =  (PLFLT (*) (PLPointer p, PLINT ix, PLINT iy))$a_value
			]"
		ensure
			get_set: a_value = c_get (an_item)
		end

	c_set (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->set
			]"
		end

	set_c_set (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->set =  (PLFLT (*) (PLPointer p, PLINT ix, PLINT iy, PLFLT z))$a_value
			]"
		ensure
			set_set: a_value = c_set (an_item)
		end

	c_add (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->add
			]"
		end

	set_c_add (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->add =  (PLFLT (*) (PLPointer p, PLINT ix, PLINT iy, PLFLT z))$a_value
			]"
		ensure
			add_set: a_value = c_add (an_item)
		end

	c_sub (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->sub
			]"
		end

	set_c_sub (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->sub =  (PLFLT (*) (PLPointer p, PLINT ix, PLINT iy, PLFLT z))$a_value
			]"
		ensure
			sub_set: a_value = c_sub (an_item)
		end

	c_mul (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->mul
			]"
		end

	set_c_mul (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->mul =  (PLFLT (*) (PLPointer p, PLINT ix, PLINT iy, PLFLT z))$a_value
			]"
		ensure
			mul_set: a_value = c_mul (an_item)
		end

	c_div (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->div
			]"
		end

	set_c_div (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->div =  (PLFLT (*) (PLPointer p, PLINT ix, PLINT iy, PLFLT z))$a_value
			]"
		ensure
			div_set: a_value = c_div (an_item)
		end

	c_is_nan (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->is_nan
			]"
		end

	set_c_is_nan (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->is_nan =  (PLINT (*) (PLPointer p, PLINT ix, PLINT iy))$a_value
			]"
		ensure
			is_nan_set: a_value = c_is_nan (an_item)
		end

	c_minmax (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->minmax
			]"
		end

	set_c_minmax (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->minmax =  (void (*) (PLPointer p, PLINT nx, PLINT ny, PLFLT_NC_SCALAR zmin, PLFLT_NC_SCALAR zmax))$a_value
			]"
		ensure
			minmax_set: a_value = c_minmax (an_item)
		end

	c_f2eval (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->f2eval
			]"
		end

	set_c_f2eval (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((plf2ops_t*)$an_item)->f2eval =  (PLFLT (*) (PLINT ix, PLINT iy, PLPointer p))$a_value
			]"
		ensure
			f2eval_set: a_value = c_f2eval (an_item)
		end

end
