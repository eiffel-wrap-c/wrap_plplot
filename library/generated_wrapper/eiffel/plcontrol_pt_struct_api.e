note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class PLCONTROL_PT_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	c1: REAL_64
			-- Access member `c1`
		require
			exists: exists
		do
			Result := c_c1 (item)
		ensure
			result_correct: Result = c_c1 (item)
		end

	set_c1 (a_value: REAL_64) 
			-- Change the value of member `c1` to `a_value`.
		require
			exists: exists
		do
			set_c_c1 (item, a_value)
		ensure
			c1_set: a_value = c1
		end

	c2: REAL_64
			-- Access member `c2`
		require
			exists: exists
		do
			Result := c_c2 (item)
		ensure
			result_correct: Result = c_c2 (item)
		end

	set_c2 (a_value: REAL_64) 
			-- Change the value of member `c2` to `a_value`.
		require
			exists: exists
		do
			set_c_c2 (item, a_value)
		ensure
			c2_set: a_value = c2
		end

	c3: REAL_64
			-- Access member `c3`
		require
			exists: exists
		do
			Result := c_c3 (item)
		ensure
			result_correct: Result = c_c3 (item)
		end

	set_c3 (a_value: REAL_64) 
			-- Change the value of member `c3` to `a_value`.
		require
			exists: exists
		do
			set_c_c3 (item, a_value)
		ensure
			c3_set: a_value = c3
		end

	p: REAL_64
			-- Access member `p`
		require
			exists: exists
		do
			Result := c_p (item)
		ensure
			result_correct: Result = c_p (item)
		end

	set_p (a_value: REAL_64) 
			-- Change the value of member `p` to `a_value`.
		require
			exists: exists
		do
			set_c_p (item, a_value)
		ensure
			p_set: a_value = p
		end

	a: REAL_64
			-- Access member `a`
		require
			exists: exists
		do
			Result := c_a (item)
		ensure
			result_correct: Result = c_a (item)
		end

	set_a (a_value: REAL_64) 
			-- Change the value of member `a` to `a_value`.
		require
			exists: exists
		do
			set_c_a (item, a_value)
		ensure
			a_set: a_value = a
		end

	alt_hue_path: INTEGER
			-- Access member `alt_hue_path`
		require
			exists: exists
		do
			Result := c_alt_hue_path (item)
		ensure
			result_correct: Result = c_alt_hue_path (item)
		end

	set_alt_hue_path (a_value: INTEGER) 
			-- Change the value of member `alt_hue_path` to `a_value`.
		require
			exists: exists
		do
			set_c_alt_hue_path (item, a_value)
		ensure
			alt_hue_path_set: a_value = alt_hue_path
		end

feature {NONE} -- Implementation wrapper for struct PLControlPt

	sizeof_external: INTEGER 
		external
			"C inline use <plplot.h>"
		alias
			"sizeof(PLControlPt)"
		end

	c_c1 (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->c1
			]"
		end

	set_c_c1 (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->c1 =  (PLFLT)$a_value
			]"
		ensure
			c1_set: a_value = c_c1 (an_item)
		end

	c_c2 (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->c2
			]"
		end

	set_c_c2 (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->c2 =  (PLFLT)$a_value
			]"
		ensure
			c2_set: a_value = c_c2 (an_item)
		end

	c_c3 (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->c3
			]"
		end

	set_c_c3 (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->c3 =  (PLFLT)$a_value
			]"
		ensure
			c3_set: a_value = c_c3 (an_item)
		end

	c_p (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->p
			]"
		end

	set_c_p (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->p =  (PLFLT)$a_value
			]"
		ensure
			p_set: a_value = c_p (an_item)
		end

	c_a (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->a
			]"
		end

	set_c_a (an_item: POINTER; a_value: REAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->a =  (PLFLT)$a_value
			]"
		ensure
			a_set: a_value = c_a (an_item)
		end

	c_alt_hue_path (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->alt_hue_path
			]"
		end

	set_c_alt_hue_path (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <plplot.h>"
		alias
			"[
				((PLControlPt*)$an_item)->alt_hue_path =  (int)$a_value
			]"
		ensure
			alt_hue_path_set: a_value = c_alt_hue_path (an_item)
		end

end
